{"version":3,"sources":["./providers/webpack/universalModuleDefinition","./providers/webpack/bootstrap","./providers/./util/error/error.js","./providers/./util/error/severity.js","./providers/./util/error/category.js","./providers/./util/error/code.js","./providers/./entities/media-entry.js","./providers/./util/request-builder.js","./providers/./util/logger.js","./providers/./k-provider/ovp/config.js","./providers/./k-provider/ovp/response-types/kaltura-media-entry.js","./providers/./entities/media-format.js","./providers/./k-provider/common/base-service-result.js","./providers/./k-provider/ovp/services/ovp-service.js","./providers/./k-provider/ovp/response-types/kaltura-rule-action.js","./providers/./entities/media-source.js","./providers/./k-provider/ovp/services/base-entry-service.js","./providers/./k-provider/ovp/services/session-service.js","./providers/./k-provider/ovp/loaders/session-loader.js","./providers/./k-provider/common/multi-request-builder.js","./providers/./k-provider/common/response-types/kaltura-drm-playback-plugin-data.js","./providers/./entities/media-sources.js","./providers/./k-provider/common/data-loader-manager.js","./providers/./k-provider/common/response-types/kaltura-access-control-message.js","./providers/./entities/drm.js","./providers/./k-provider/ovp/response-types/kaltura-playback-source.js","./providers/./k-provider/ovp/response-types/kaltura-base-entry-list-response.js","./providers/./util/clone.js","./providers/./k-provider/ovp/response-types/kaltura-access-control-modify-request-host-regex-action.js","./providers/./k-provider/ovp/response-types/kaltura-flavor-asset.js","./providers/./k-provider/ovp/response-types/kaltura-playback-context.js","./providers/./k-provider/ovp/response-types/kaltura-metadata.js","./providers/./k-provider/ovp/response-types/kaltura-metadata-list-response.js","./providers/./k-provider/ovp/request-params/base-entry-response-profile.js","./providers/./k-provider/common/base-provider.js","./providers/./entities/entry-list.js","./providers/./entities/bumper.js","./providers/./k-provider/ovp/response-types/kaltura-bumper.js","./providers/./k-provider/ovp/services/meta-data-service.js","./providers/./k-provider/ovp/play-source-url-builder.js","./providers/./util/xml-parser.js","./providers/./entities/playlist.js","./providers/./k-provider/ovp/external-captions-builder.js","./providers/./k-provider/ovp/provider-parser.js","./providers/./k-provider/ovp/loaders/media-entry-loader.js","./providers/./k-provider/ovp/loaders/data-loader-manager.js","./providers/./k-provider/ovp/services/playlist-service.js","./providers/./k-provider/ovp/response-types/kaltura-playlist.js","./providers/./k-provider/ovp/response-types/kaltura-media-entries.js","./providers/./k-provider/ovp/loaders/playlist-loader.js","./providers/./k-provider/ovp/loaders/entry-list-loader.js","./providers/./k-provider/ovp/provider.js","./providers/./k-provider/streamamg/config.js","./providers/./k-provider/streamamg/services/base-entry-service.js","./providers/./k-provider/streamamg/loaders/media-entry-loader.js","./providers/./k-provider/streamamg/services/multi-request-builder.js","./providers/./k-provider/streamamg/services/ovp-service.js","./providers/./k-provider/streamamg/loaders/data-loader-manager.js","./providers/./k-provider/streamamg/provider.js","./providers/./k-provider/streamamg/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Error","severity","category","code","data","this","_logger","error","RECOVERABLE","CRITICAL","NETWORK","SERVICE","PROVIDER","UNSUPPORTED_SCHEME","BAD_HTTP_STATUS","HTTP_ERROR","TIMEOUT","MALFORMED_DATA_URI","BAD_SERVER_RESPONSE","MULTIREQUEST_API_ERROR","API_RESPONSE_MISMATCH","ERROR","BLOCK_ACTION","MEDIA_STATUS_NOT_READY","MISSING_MANDATORY_PARAMS","MISSING_PLAY_SOURCE","METHOD_NOT_IMPLEMENTED","getLogger","MediaEntry","metadata","Map","sources","MediaSources","type","Type","UNKNOWN","toJSON","id","duration","dvrStatus","status","poster","assetReferenceType","VOD","LIVE","IMAGE","AUDIO","ON","OFF","RequestBuilder","headers","async","timeout","maxAttempts","getUrl","serviceUrl","service","action","doHttpRequest","promise","Promise","resolve","reject","_requestPromise","url","Severity","Category","Code","_createXHR","request","XMLHttpRequest","onreadystatechange","readyState","response","JSON","parse","responseText","responseHeaders","_getResponseHeaders","_createError","text","open","method","retryConfig","requestTime","performance","now","ontimeout","_handleError","statusText","onerror","onabort","forEach","setRequestHeader","send","params","getAllResponseHeaders","split","filter","header","toLowerCase","indexOf","_attemptCounter","assign","attempt","JsLogger","VERSION","DEBUG","INFO","TIME","TRACE","WARN","createDefaultHandler","debug","enabledFor","getLevel","info","log","setHandler","setLevel","time","timeEnd","trace","useDefaults","warn","LogLevel","setLogger","logger","getLogLevel","setLogLevel","level","defaultConfig","cdnUrl","serviceParams","apiVersion","format","useApiCaptions","OVPConfiguration","set","clientConfig","clone","KalturaMediaEntry","entry","referenceId","externalSourceType","description","dataUrl","entryType","mediaType","flavorParamsIds","thumbnailUrl","tags","AUTOMATIC","EXTERNAL_MEDIA","MEDIA_CLIP","MIX","PLAYLIST","DATA","LIVE_STREAM","LIVE_CHANNEL","DOCUMENT","VIDEO","LIVE_STREAM_FLASH","LIVE_STREAM_WINDOWS_MEDIA","LIVE_STREAM_REAL_MEDIA","LIVE_STREAM_QUICK_TIME","ERROR_IMPORTING","ERROR_CONVERTING","SCAN_FAILURE","IMPORT","INFECTED","PRECONVERT","READY","DELETED","PENDING","MODERATE","BLOCKED","NO_CONTENT","PENDING_MODERATION","APPROVED","REJECTED","FLAGGED_FOR_REVIEW","AUTO_APPROVED","MediaFormat","DASH","mimeType","pathExt","HLS","WVM","MP4","MP3","SupportedStreamFormat","isProgressiveSource","formatName","sourceFormat","ServiceResult","objectType","hasError","ServiceError","message","OVPService","getMultiRequest","playerVersion","ks","partnerId","config","ovpParams","clientTag","multiReq","MultiRequestBuilder","KalturaRuleAction","DRM_POLICY","BLOCK","PREVIEW","LIMIT_FLAVORS","ADD_TO_STORAGE","LIMIT_DELIVERY_PROFILES","SERVE_FROM_REMOTE_SERVER","REQUEST_HOST_REGEX","LIMIT_THUMBNAIL_CAPTURE","MediaSource","mimetype","bandwidth","width","height","label","drmData","length","Array","isArray","push","OVPBaseEntryService","getPlaybackContext","serviceEntryId","tag","entryId","contextDataParams","flavorTags","list","redirectFromEntryId","getEntryListReqParams","filterParams","idEqual","referenceIdEqual","responseProfile","BaseEntryResponseProfile","OVPSessionService","anonymousSession","widgetId","OVPSessionLoader","requests","buildRequests","_widgetId","_requests","_response","isValid","add","requestParams","serviceDef","execute","stringify","err","FAILED_PARSING_REQUEST","then","multiRequestResult","MultiRequestResult","success","results","result","serviceResult","KalturaDrmPlaybackPluginData","drm","scheme","licenseURL","certificate","WIDEVINE_CENC","PLAYREADY_CENC","FAIRPLAY","progressive","dash","hls","map","source","mediaFormat","h","DataLoaderManager","networkRetryConfig","_networkRetryConfig","loader","execution_loader","_loaders","startIndex","_multiRequest","executionLoaderResponseMap","from","val","index","_loadersResponseMap","fetchData","_multiResponse","prepareData","loaderDataIndexes","slice","KalturaAccessControlMessage","Drm","licenseUrl","KalturaPlaybackSource","deliveryProfileId","protocols","flavorIds","hasDrmData","hasFlavorIds","getProtocol","protocol","returnValue","KalturaBaseEntryListResponse","responseObj","totalCount","entries","objects","node","e","keys","KalturaAccessControlModifyRequestHostRegexAction","pattern","replacement","replacmenServerNodeId","KalturaFlavorAsset","flavorParamsId","fileExt","bitrate","frameRate","isOriginal","isWeb","containerFormat","videoCodecId","language","QUEUED","CONVERTING","NOT_APPLICABLE","TEMP","WAIT_FOR_CONVERT","IMPORTING","VALIDATING","EXPORTING","KalturaPlaybackContext","messages","actions","flavorAssets","flavor","bumperData","bumper","KalturaBumper","hasBlockAction","undefined","getBlockAction","find","getErrorMessages","getRequestHostRegexAction","KalturaMetadata","metadataProfileId","metadataProfileVersion","metadataObjectType","objectId","version","created","Date","setUTCSeconds","createdAt","updated","updatedAt","xml","AD_CUE_POINT","ANNOTATION","CODE_CUE_POINT","THUMB_CUE_POINT","ENTRY","CATEGORY","USER","PARTNER","DYNAMIC_OBJECT","VALID","INVALID","KalturaMetadataListResponse","metas","meta","INCLUDE_FIELDS","fields","EXCLUDE_FIELDS","BaseProvider","options","_partnerId","_uiConfId","uiConfId","_isAnonymous","_ks","_playerVersion","defaultWidgetId","getMediaConfig","mediaInfo","getPlaylistConfig","playlistInfo","getEntryListConfig","entryListInfo","_verifyHasSources","concat","EntryList","items","Bumper","clickThroughUrl","OVPMetadataService","objectIdEqual","metadataObjectTypeEqual","PlaySourceUrlBuilder","build","urlParams","serviceUrlOrigin","substr","lastIndexOf","extension","playUrl","endsWith","XmlParser","xmlToJson","obj","nodeType","attributes","j","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","old","Playlist","KalturaCaptionType","SRT","DFXP","WEBVTT","CAP","CaptionsFormatsMap","ExternalCaptionsBuilder","createConfig","captions","caption","includes","webVttUrl","addKsToUrl","default","isDefault","languageCode","OVPProviderParser","getMediaEntry","mediaEntryResponse","mediaEntry","playbackContext","playBackContextResult","metadataList","metadataListResult","kalturaSources","_getParsedSources","playbackCaptions","_fillBaseData","ksParam","replace","getPlaylist","playlistResponse","playlist","playlistData","playlistItems","getEntryList","entryList","getBumper","assetResponse","progressiveBumper","parsedSources","_parseProgressiveSources","_parseMetadata","_getEntryType","entryTypeEnum","typeEnum","MediaType","EntryType","progressiveSource","mediaSource","addAdaptiveSource","parsedSource","_parseAdaptiveSource","_getBaseProtocol","kalturaSource","_applyRegexAction","drmParams","Scheme","videoSources","audioSources","sourceId","metaXml","domParser","DOMParser","parseFromString","metasObj","exec","document","location","regexAction","regex","RegExp","match","OVPMediaEntryLoader","_entryId","_referenceId","OVPDataLoaderManager","OVPPlaylistService","playlistId","SERVICE_NAME","KalturaPlaylist","KalturaMediaEntries","OVPPlaylistLoader","_playlistId","OVPEntryListLoader","_entries","OVPProvider","env","_setFilterOptionsConfig","filterOptions","networkRetryParameters","_dataLoader","_getEntryRedirectFilter","_parseDataFromResponse","_filterOptionsConfig","mediaConfig","session","isAnonymous","_getDefaultSourcesObject","plugins","has","sessionLoader","mediaLoader","_getSourcesObject","_verifyMediaStatus","EntryStatus","_parsePlaylistDataFromResponse","playlistConfig","_getPlaylistObject","playlistLoader","_parseEntryListDataFromResponse","dvr","vr","sourcesObject","mediaSources","StreamAMGConfiguration","StreamAMGBaseEntryService","getContextData","StreamAMGMediaEntryLoader","console","asset","join","LegacyMultiRequestBuilder","addParams","prefix","eachValue","encodeURIComponent","encodeQs","createQs","StreamAMGProvider","NAME","__NAME__","__VERSION__"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAmB,UAAID,KAEvBD,EAAc,QAAIA,EAAc,SAAK,GAAIA,EAAc,QAAa,UAAIA,EAAc,QAAa,WAAK,GAAIA,EAAc,QAAa,UAAa,UAAIC,KAR1J,CASGK,QAAQ,WACX,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,I,oMCzErD,IAKqBC,EA0BnB,WAAYC,EAAkBC,EAAkBC,EAAcC,QAAgB,IAAhBA,MAAY,IACxEC,KAAKJ,SAAWA,EAChBI,KAAKH,SAAWA,EAChBG,KAAKF,KAAOA,EACZE,KAAKD,KAAOA,EACZJ,EAAMM,QAAQC,MAAd,YAAgCL,EAAhC,WAAmDC,EAAnD,KAA6DC,I,EA/B5CJ,E,WCVU,CAQ7BQ,YAAa,EAMbC,SAAU,I,EDJST,E,WEXU,CAE7BU,QAAS,EACTC,QAAS,EACTC,SAAU,I,EFOSZ,E,OGVE,CAIrBa,mBAAoB,IAKpBC,gBAAiB,KAKjBC,WAAY,KAKZC,QAAS,KAKTC,mBAAoB,KAKpBC,oBAAqB,KAKrBC,uBAAwB,KAKxBC,sBAAuB,KAKvBC,MAAO,IAKPC,aAAc,KAKdC,uBAAwB,KAMxBC,yBAA0B,IAK1BC,oBAAqB,KAKrBC,uBAAwB,O,EH5DL1B,E,UAiBG2B,YAtBG,W,uMINNC,E,WAoEnB,aACEvB,KAAKwB,SAAW,IAAIC,IACpBzB,KAAK0B,QAAU,IAAIC,IACnB3B,KAAK4B,KAAOL,EAAWM,KAAKC,Q,mBAO9BC,OAAA,WACE,MAAO,CACLC,GAAIhC,KAAKgC,GACT9D,KAAM8B,KAAK9B,KACXwD,QAAS1B,KAAK0B,QAAQK,SACtBE,SAAUjC,KAAKiC,SACfC,UAAWlC,KAAKkC,UAChBC,OAAQnC,KAAKmC,OACbX,SAAUxB,KAAKwB,SACfI,KAAM5B,KAAK4B,KACXQ,OAAQpC,KAAKoC,OACbC,mBAAoBrC,KAAKqC,qB,OAzFVd,E,OACqB,CACtCe,IAAK,MACLC,KAAM,OACNC,MAAO,QACPC,MAAO,QACPX,QAAS,Y,EANQP,E,YAQ0B,CAC3CmB,GAAI,EACJC,IAAK,K,kMCVT,IAEqBC,E,WAwEnB,WAAYC,QAA0C,IAA1CA,MAA+B,IAAIpB,KAAO,qBA1BR,CAC5CqB,OAAO,EACPC,QAAS,EACTC,YAAa,IAuBuC,yBAd5B,GAexBhD,KAAK6C,QAAUA,E,2BASjBI,OAAA,SAAOC,GACL,OAAOA,EAAa,YAAclD,KAAKmD,SAAWnD,KAAKoD,OAAS,WAAapD,KAAKoD,OAAS,K,EAQ7FC,cAAA,WAA8B,WACtBC,EAAU,IAAIC,SAAQ,SAACC,EAASC,GACpC,EAAKC,gBAAkB,CACrBF,UACAC,aAWJ,OARKzD,KAAK2D,KACR3D,KAAK0D,gBAAgBD,OACnB,IAAI9D,IAAMA,IAAMiE,SAASxD,SAAUT,IAAMkE,SAASxD,QAASV,IAAMmE,KAAKlD,mBAAoB,CACxF+C,IAAK3D,KAAK2D,OAIhB3D,KAAK+D,aACET,G,EAGTS,WAAA,WAAmB,WACbC,EAAU,IAAIC,eAClBD,EAAQE,mBAAqB,WAC3B,GAA2B,IAAvBF,EAAQG,YACa,MAAnBH,EAAQ7B,OACV,IACE,IAAMiC,EAAWC,KAAKC,MAAMN,EAAQO,cAGpC,OAFA,EAAKC,gBAAkB,EAAKC,oBAAoBT,GAEzC,EAAKN,gBAAgBF,QAAQY,GACpC,MAAOlE,GACP,EAAKwD,gBAAgBD,OACnB,EAAKiB,aAAaV,EAASrE,IAAMmE,KAAKjD,oBAAqB,CACzD8D,KAAMX,EAAQO,kBAO1BP,EAAQY,KAAK5E,KAAK6E,OAAQ7E,KAAK2D,IAAK3D,KAAK8E,YAAYhC,OACjD9C,KAAK8E,YAAYhC,OAAS9C,KAAK8E,YAAY/B,UAC7CiB,EAAQjB,QAAU/C,KAAK8E,YAAY/B,SAErC,IAAMgC,EAAcC,YAAYC,MAChCjB,EAAQkB,UAAY,WAClB,EAAKC,aAAanB,EAASrE,IAAMmE,KAAKnD,QAAS,CAC7CoC,SAAUiC,YAAYC,MAAQF,GAAe,IAC7CK,WAAYpB,EAAQoB,cAGxBpB,EAAQqB,QAAUrB,EAAQsB,QAAU,WAClC,EAAKH,aAAanB,EAASrE,IAAMmE,KAAKpD,WAAY,CAChDiE,KAAMX,EAAQO,aACda,WAAYpB,EAAQoB,cAGxBpF,KAAK6C,QAAQ0C,SAAQ,SAAC3G,EAAOM,GAC3B8E,EAAQwB,iBAAiBtG,EAAKN,MAEhCoF,EAAQyB,KAAKzF,KAAK0F,S,EAGpBjB,oBAAA,SAAoBT,GAClB,OAAOA,EACJ2B,wBACAC,MAAM,MACNC,QAAO,SAAAC,GAAM,OAA4D,IAAxDA,EAAOC,cAAcC,QA9JP,U,EAiKpCb,aAAA,SAAanB,EAAyBlE,EAAcC,GAClD,IAAMG,EAAQF,KAAK0E,aAAaV,EAASlE,EAAMC,GAK/C,GAJAiE,EAAQE,mBAAqB,aAC7BF,EAAQqB,QAAU,aAClBrB,EAAQkB,UAAY,aACpBlB,EAAQsB,QAAU,eACdtF,KAAK8E,YAAY9B,aAAehD,KAAKiG,gBAAkBjG,KAAK8E,YAAY9B,aAI1E,OAAOhD,KAAK0D,gBAAgBD,OAAOvD,GAHnCF,KAAKiG,kBACLjG,KAAK+D,c,EAMTW,aAAA,SAAaV,EAAyBlE,EAAcC,GAMlD,OALA1B,OAAO6H,OAAOnG,EAAM,CAClB4D,IAAK3D,KAAK2D,IACVd,QAAS7C,KAAKyE,oBAAoBT,GAClCmC,QAASnG,KAAKiG,kBAET,IAAItG,IAAMA,IAAMiE,SAASxD,SAAUT,IAAMkE,SAASxD,QAASP,EAAMC,I,mCCtJ5E,4IAAIqG,EAAW,CACb5H,IAAK,iBAAO,CACV6H,QAAS,GACTC,MAAO,CAAC1H,MAAO,GAAIV,KAAM,IACzB8C,MAAO,CAACpC,MAAO,GAAIV,KAAM,IACzBqI,KAAM,CAAC3H,MAAO,GAAIV,KAAM,IACxByE,IAAK,CAAC/D,MAAO,GAAIV,KAAM,IACvBsI,KAAM,CAAC5H,MAAO,GAAIV,KAAM,IACxBuI,MAAO,CAAC7H,MAAO,GAAIV,KAAM,IACzBwI,KAAM,CAAC9H,MAAO,GAAIV,KAAM,IACxByI,qBAAsB,aACtBC,MAAO,aACPC,WAAY,aACZ3G,MAAO,aACP1B,IAAK,aACLsI,SAAU,aACVC,KAAM,aACNC,IAAK,aACLC,WAAY,aACZC,SAAU,aACVC,KAAM,aACNC,QAAS,aACTC,MAAO,aACPC,YAAa,aACbC,KAAM,gBAINC,EAAyB,GAM7B,SAASC,EAAUC,GACbA,GAAsC,mBAArBA,EAAOpG,YAC1B8E,EAAS5H,IAAMkJ,EAAOpG,WAEpBoG,GAAUA,EAAOF,WACnBA,EAAWE,EAAOF,UAStB,SAASlG,EAAUpD,GAEjB,OAAOkI,EAAS5H,IAAIN,GAQtB,SAASyJ,EAAYzJ,GACnB,OAAOoD,EAAUpD,GAAM4I,WASzB,SAASc,EAAYC,EAAuB3J,GAC1CoD,EAAUpD,GAAMgJ,SAASW,GAGZvG,O,6BCzGf,8CAEMwG,EAAwB,CAC5B5E,WAAY,uCACZ6E,OAAQ,gCACRC,cAAe,CACbC,WAAY,QACZC,OAAQ,GAEVC,gBAAgB,GAGGC,E,kCACZC,IAAP,SAAWC,GACLA,GACFjK,OAAO6H,OAAO4B,EAAeQ,I,EAI1B9J,IAAP,WACE,OAAO+J,YAAMT,I,iMCpBIU,EA2HnB,SAAYC,GACVzI,KAAKgC,GAAKyG,EAAMzG,GAChBhC,KAAK0I,YAAcD,EAAMC,YACzB1I,KAAK2I,mBAAqBF,EAAME,mBAChC3I,KAAK9B,KAAOuK,EAAMvK,KAClB8B,KAAK4I,YAAcH,EAAMG,YACzB5I,KAAK6I,QAAUJ,EAAMI,QACrB7I,KAAK4B,KAAO6G,EAAM7G,KAClB5B,KAAK8I,UAAYL,EAAMM,UACvB/I,KAAKgJ,gBAAkBP,EAAMO,gBAC7BhJ,KAAKiC,SAAWwG,EAAMxG,SACtBjC,KAAKoC,OAASqG,EAAMQ,aACpBjJ,KAAKmC,OAASsG,EAAMtG,OACpBnC,KAAKkC,UAAYuG,EAAMvG,UACvBlC,KAAKkJ,KAAOT,EAAMS,M,EAzIDV,E,YACiD,CAClEW,UAAW,CAACvK,OAAQ,GACpBwK,eAAgB,CAACxK,MAAO,+BACxByK,WAAY,CAACzK,MAAO,GACpB0K,IAAK,CAAC1K,MAAO,GACb2K,SAAU,CAAC3K,MAAO,GAClB4K,KAAM,CAAC5K,MAAO,GACd6K,YAAa,CAAC7K,MAAO,GACrB8K,aAAc,CAAC9K,MAAO,GACtB+K,SAAU,CAAC/K,MAAO,M,EAVD4J,E,YAawC,CACzDoB,MAAO,CAAChL,MAAO,GACf4D,MAAO,CAAC5D,MAAO,GACf6D,MAAO,CAAC7D,MAAO,GACfiL,kBAAmB,CAACjL,MAAO,KAC3BkL,0BAA2B,CAAClL,MAAO,KACnCmL,uBAAwB,CAACnL,MAAO,KAChCoL,uBAAwB,CAACpL,MAAO,O,EApBf4J,E,cAuBuC,CACxDyB,iBAAkB,EAClBC,kBAAmB,EACnBC,aAAc,wBACdC,OAAQ,EACRC,SAAU,qBACVC,WAAY,EACZC,MAAO,EACPC,QAAS,EACTC,QAAS,EACTC,SAAU,EACVC,QAAS,EACTC,WAAY,I,EAnCKpC,E,wBAsCwC,CACzDqC,mBAAoB,EACpBC,SAAU,EACVC,SAAU,EACVC,mBAAoB,EACpBN,SAAU,EACVO,cAAe,K,6BC5CnB,sGAAO,IAAMC,EAAyD,CACpEC,KAAM,CACJjN,KAAM,OACNkN,SAAU,uBACVC,QAAS,OAEXC,IAAK,CACHpN,KAAM,MACNkN,SAAU,wBACVC,QAAS,QAEXE,IAAK,CACHrN,KAAM,MACNkN,SAAU,YACVC,QAAS,OAEXG,IAAK,CACHtN,KAAM,MACNkN,SAAU,YACVC,QAAS,OAEXI,IAAK,CACHvN,KAAM,MACNkN,SAAU,aACVC,QAAS,QAIAK,EAA8D,IAAIjK,IAAI,CACjF,CAAC,WAAYyJ,EAAYC,MACzB,CAAC,YAAaD,EAAYI,KAC1B,CAAC,MAAOJ,EAAYM,OAQtB,SAASG,EAAoBC,GAC3B,IAAMC,EAAeH,EAAsBlN,IAAIoN,GAC/C,QAASC,GAAgBA,EAAa3N,OAASgN,EAAYM,IAAItN,O,mECzC5C4N,EAqBnB,SAAY1H,G,aAhBQ,G,EAgBU,c,EAAA,M,sFACA,wBAAxBA,EAAS2H,YACX/L,KAAKgM,UAAW,EAChBhM,KAAKE,MAAQ,IAAI+L,EAAa7H,EAAStE,KAAMsE,EAAS8H,UAC7C9H,EAASlE,OAAuC,wBAA9BkE,EAASlE,MAAM6L,YAC1C/L,KAAKgM,UAAW,EAChBhM,KAAKE,MAAQ,IAAI+L,EAAa7H,EAASlE,MAAMJ,KAAMsE,EAASlE,MAAMgM,UAElElM,KAAKD,KAAOqE,GAKZ6H,EAiBJ,SAAYnM,EAAcoM,GACxBlM,KAAKF,KAAOA,EACZE,KAAKkM,QAAUA,I,6BCrDnB,qDAKqBC,E,kCAUZC,gBAAP,SAAuBC,EAAuBC,EAAYC,GACxD,IAAMC,EAASpE,IAAiB5J,MAC1BiO,EAAYD,EAAOxE,cACzB3J,OAAO6H,OAAOuG,EAAW,CAACH,GAAIA,EAAII,UAAW,UAAYL,IACrDE,GACFlO,OAAO6H,OAAOuG,EAAW,CAACF,UAAWA,IAEvC,IAAM1J,EAA+B,IAAIpB,IACzCoB,EAAQwF,IAAI,eAAgB,oBAC5B,IAAMsE,EAAW,IAAIC,IAAoB/J,GAKzC,OAJA8J,EAAS9H,OAAS,OAClB8H,EAASxJ,QAvBgB,eAwBzBwJ,EAAShJ,IAAMgJ,EAAS1J,OAAOuJ,EAAOtJ,YACtCyJ,EAASjH,OAAS+G,EACXE,G,+EC7BUE,EAuBnB,SAAY9M,GACVC,KAAK4B,KAAO7B,EAAK6B,M,EAvB8B,CAC/CkL,WAAY,iBACZC,MAAO,EACPC,QAAS,EACTC,cAAe,EACfC,eAAgB,EAChBC,wBAAyB,EACzBC,yBAA0B,EAC1BC,mBAAoB,EACpBC,wBAAyB,I,cAVRT,G,oHCArB,4CAEqBU,E,4CA8CnBxL,OAAA,WACE,IAAMqC,EAAsC,CAC1CpC,GAAIhC,KAAKgC,GACT2B,IAAK3D,KAAK2D,IACV6J,SAAUxN,KAAKwN,UAcjB,OAZIxN,KAAKyN,YAAWrJ,EAASqJ,UAAYzN,KAAKyN,WAC1CzN,KAAK0N,QAAOtJ,EAASsJ,MAAQ1N,KAAK0N,OAClC1N,KAAK2N,SAAQvJ,EAASuJ,OAAS3N,KAAK2N,QACpC3N,KAAK4N,QAAOxJ,EAASwJ,MAAQ5N,KAAK4N,OAClC5N,KAAK6N,SAAW7N,KAAK6N,QAAQC,OAAS,IACxC1J,EAASyJ,QAAU,GACnB7N,KAAK6N,QAAQtI,SAAQ,SAAAtH,GACf8P,MAAMC,QAAQ5J,EAASyJ,UACzBzJ,EAASyJ,QAAQI,KAAKhQ,EAAE8D,cAIvBqC,G,+FC9DX,IAEqB8J,E,sKAUZC,mBAAP,SAA0BjL,EAAoBoJ,EAAY8B,GACxD,IAAMvL,EAA+B,IAAIpB,IACzCoB,EAAQwF,IAAI,eAAgB,oBAC5B,IAAMrE,EAAU,IAAIpB,IAAeC,GACnCmB,EAAQb,QAhBiB,YAiBzBa,EAAQZ,OAAS,qBACjBY,EAAQa,OAAS,OACjBb,EAAQL,IAAMK,EAAQf,OAAOC,GAC7Bc,EAAQqK,IAAM,+BAGd,OADArK,EAAQ0B,OAAS,CAAC4I,QAASF,EAAgB9B,GAAIA,EAAIiC,kBADzB,CAACxC,WAAY,2BAA4ByC,WAAY,QAExExK,G,EAcFyK,KAAP,SAAYvL,EAAoBoJ,EAAYgC,EAAiBI,EAA8BhG,GACzF,IAAM7F,EAA+B,IAAIpB,IACzCoB,EAAQwF,IAAI,eAAgB,oBAC5B,IAAMrE,EAAU,IAAIpB,IAAeC,GAOnC,OANAmB,EAAQb,QAzCiB,YA0CzBa,EAAQZ,OAAS,OACjBY,EAAQa,OAAS,OACjBb,EAAQL,IAAMK,EAAQf,OAAOC,GAC7Bc,EAAQqK,IAAM,OACdrK,EAAQ0B,OAASwI,EAAoBS,sBAAsBL,EAAShC,EAAIoC,EAAqBhG,GACtF1E,G,EAaF2K,sBAAP,SAA6BL,EAAiBhC,EAAYoC,EAA8BhG,GACtF,IAAIkG,EAAe,GAOnB,OANIN,EACFM,EAAeF,EAAsB,CAACA,oBAAqBJ,GAAW,CAACO,QAASP,GACvE5F,IACTkG,EAAe,CAAC7C,WAAY,yBAA0B+C,iBAAkBpG,IAGnE,CAAC4D,GAAIA,EAAIzG,OAAQ+I,EAAcG,gBAAiB,IAAIC,M,GAlEd7C,M,iFCHjD,IAEqB8C,E,sKASZC,iBAAP,SAAwBhM,EAAoBiM,GAC1C,IAAMtM,EAA+B,IAAIpB,IACzCoB,EAAQwF,IAAI,eAAgB,oBAC5B,IAAMrE,EAAU,IAAIpB,IAAeC,GAOnC,OANAmB,EAAQb,QAfiB,UAgBzBa,EAAQZ,OAAS,qBACjBY,EAAQa,OAAS,OACjBb,EAAQL,IAAMK,EAAQf,OAAOC,GAC7Bc,EAAQqK,IAAM,sBACdrK,EAAQ0B,OAAS,CAACyJ,YACXnL,G,GAnBoCmI,K,iLCD1BiD,E,qBA6BnB,WAAY1J,G,YA1BK,I,EA0BW,e,EAAA,M,sFAC1B1F,KAAKqP,SAAWrP,KAAKsP,cAAc5J,GACnC1F,KAAKuP,UAAY7J,EAAOyJ,S,gCAzBxB,MAAO,c,gCAGIE,GACXrP,KAAKwP,UAAYH,G,eAIjB,OAAOrP,KAAKwP,Y,6BAGDpL,GACXpE,KAAKyP,UAAUnD,GAAKlI,EAAS,GAAGrE,KAAKuM,I,eAIrC,OAAOtM,KAAKyP,UAAUnD,Q,sDAmBxBgD,cAAA,SAAc5J,GACZ,IAAM8G,EAASpE,IAAiB5J,MAC1B6Q,EAAkC,GAExC,OADAA,EAASpB,KAAKgB,EAAkBC,iBAAiB1C,EAAOtJ,WAAYwC,EAAOyJ,WACpEE,G,EAQTK,QAAA,WACE,QAAS1P,KAAKuP,W,8XCrDG3C,E,2KAMe,I,oHAOlC+C,IAAA,SAAI3L,GAA8C,MAChDhE,KAAKqP,SAASpB,KAAKjK,GACnB,IAAM4L,EAAgB,GAChBC,EAAqB,CAAC1M,QAASa,EAAQb,QAASC,OAAQY,EAAQZ,QAItE,OAHA/E,OAAO6H,OAAO0J,IAAd,MAA+B5P,KAAKqP,SAASvB,QAASzP,OAAO6H,OAAO2J,EAAY7L,EAAQ0B,QAAxF,IACArH,OAAO6H,OAAO0J,EAAe5P,KAAK0F,QAClC1F,KAAK0F,OAASkK,EACP5P,M,EAQT8P,QAAA,WAA2B,WACzB,OAAO,IAAIvM,SAAQ,SAACC,EAASC,GAC3B,IACE,EAAKiC,OAASrB,KAAK0L,UAAU,EAAKrK,QAClC,MAAOsK,GACPpD,EAAoB3M,QAAQC,MAA5B,GAAqC8P,EAAI9D,SACzCzI,EACE,IAAI9D,IAAMA,IAAMiE,SAASxD,SAAUT,IAAMkE,SAAStD,SAAUZ,IAAMmE,KAAKmM,uBAAwB,CAC7F/P,MAAO8P,EACPtK,OAAQ,EAAKA,UAInB,EAAKrC,gBAAgB6M,MACnB,SAAAnQ,GACE,IAAMoQ,EAAqB,IAAIC,EAAmBrQ,GAC9CoQ,EAAmBE,QACrB7M,EAAQ,CACNX,QAAS,EAAK2B,gBACdJ,SAAU+L,IAGZ1M,EACE,IAAI9D,IAAMA,IAAMiE,SAASxD,SAAUT,IAAMkE,SAASxD,QAASV,IAAMmE,KAAKhD,uBAAwB,CAC5F6C,IAAK,EAAKA,IACVd,QAAS,EAAK2B,gBACd8L,QAASH,EAAmBG,cAKpC,SAAAN,GACEvM,EAAOuM,U,GA5DgCpN,K,EAA5BgK,E,UACFtL,YAAU,wBAkEtB,IAAM8O,EAgBX,WAAYhM,GAAkB,4BALE,IAM9BpE,KAAKqQ,SAAU,GACKjM,EAASmM,OAASnM,EAASmM,OAASnM,GAC5CmB,SAAQ,SAAAgL,GAClB,IAAMC,EAA+B,IAAI1E,IAAcyE,GAEvD,GADA,EAAKD,QAAQrC,KAAKuC,GACdA,EAAcxE,SAKhB,OAJAoE,EAAmBnQ,QAAQC,MAA3B,8CACgDsQ,EAActQ,MAAMJ,KADpE,iBACyF0Q,EAActQ,MAAMgM,QAD7G,UAGA,EAAKmE,SAAU,O,EA1BVD,E,UACM9O,YAAU,wB,yECzERmP,EAgCnB,SAAYC,GACV1Q,KAAK2Q,OAASD,EAAIC,OAClB3Q,KAAK4Q,WAAaF,EAAIE,WACtB5Q,KAAK6Q,YAAcH,EAAIG,a,EAlCmB,CAC1C,qBAAsB,0BACtB,oBAAqB,qBACrB,oBAAqB,qBACrBC,cAAe,qBACfC,eAAgB,0BAChBC,SAAU,uB,gBAPOP,G,oHCArB,mDAGqB9O,E,WAwBnB,aACE3B,KAAKiR,YAAc,GACnBjR,KAAKkR,KAAO,GACZlR,KAAKmR,IAAM,G,2BASbC,IAAA,SAAIC,EAAqBC,GACvB,GAAIA,EACF,OAAQA,EAAYpT,MAClB,KAAKgN,IAAYM,IAAItN,KACnB8B,KAAKiR,YAAYhD,KAAKoD,GACtB,MACF,KAAKnG,IAAYC,KAAKjN,KACpB8B,KAAKkR,KAAKjD,KAAKoD,GACf,MACF,KAAKnG,IAAYI,IAAIpN,KACnB8B,KAAKmR,IAAIlD,KAAKoD,K,EAYtBtP,OAAA,WACE,IAAMqC,EAAuC,CAC3C6M,YAAa,GACbC,KAAM,GACNC,IAAK,IAKP,OAHAnR,KAAKiR,YAAY1L,SAAQ,SAAA9F,GAAC,OAAI2E,EAAS6M,YAAYhD,KAAKxO,EAAEsC,aAC1D/B,KAAKmR,IAAI5L,SAAQ,SAAAgM,GAAC,OAAInN,EAAS+M,IAAIlD,KAAKsD,EAAExP,aAC1C/B,KAAKkR,KAAK3L,SAAQ,SAAAtH,GAAC,OAAImG,EAAS8M,KAAKjD,KAAKhQ,EAAE8D,aACrCqC,G,kNCnEUoN,E,WA4BnB,WAAYC,GAAoD,6BAtBd,IAAIhQ,KAsBU,kBAJ/B,IAAIA,KAKnCzB,KAAK0R,oBAAsBD,E,2BAU7B9B,IAAA,SAAIgC,EAAkBjM,GAAsB,WACtCkM,EAAmB,IAAID,EAAOjM,GAClC,GAAIkM,EAAiBlC,UAAW,CAC9B1P,KAAK6R,SAASxJ,IAAIsJ,EAAO3P,GAAI4P,GAE7B,IAAIE,EAAa9R,KAAK+R,cAAc1C,SAASvB,OAEzCuB,EAAWuC,EAAiBvC,SAChCrP,KAAK+R,cAAcjN,YAAc9E,KAAK0R,oBAEtCrC,EAAS9J,SAAQ,SAAAvB,GACf,EAAK+N,cAAcpC,IAAI3L,MAGzB,IAAIgO,EAA6BjE,MAAMkE,KAAK,IAAIlE,MAAMsB,EAASvB,SAAS,SAACoE,EAAKC,GAAN,OAAgBA,EAAQL,KAEhG9R,KAAKoS,oBAAoB/J,IAAIsJ,EAAO3P,GAAIgQ,K,EAS5CK,UAAA,WAA0B,WACxB,OAAO,IAAI9O,SAAQ,SAACC,EAASC,GAC3B,EAAKsO,cAAcjC,UAAUI,MAC3B,SAAAnQ,GACE,EAAKuS,eAAiBvS,EAAKqE,SACA,EAAKmO,YAAYxS,EAAKqE,UAChCiM,QACf7M,EAAQ,EAAKqO,UAEbpO,EACE,IAAI9D,IAAMA,IAAMiE,SAASxD,SAAUT,IAAMkE,SAASxD,QAASV,IAAMmE,KAAK/C,sBAAuB,CAC3F8B,QAAS9C,EAAK8C,cAKtB,SAAAmN,GACEvM,EAAOuM,U,EAYfuC,YAAA,SAAYnO,GAAsC,WAWhD,OAVApE,KAAK6R,SAAStM,SAAQ,SAACoM,EAAQzT,GAC7B,IAAIsU,EAAoB,EAAKJ,oBAAoB5T,IAAIN,GACrD,IACMsU,GAAqBA,EAAkB1E,OAAS,IAClD6D,EAAOvN,SAAWA,EAASkM,QAAQmC,MAAMD,EAAkB,GAAIA,EAAkBA,EAAkB1E,OAAS,GAAK,IAEnH,MAAOkC,GACP,MAAO,CAACK,SAAS,EAAOnQ,MAAO8P,OAG5B,CAACK,SAAS,EAAMtQ,KAAMC,KAAK6R,W,yEC3GjBa,EAgBnB,SAAY3S,GACVC,KAAKkM,QAAUnM,EAAKmM,QACpBlM,KAAKF,KAAOC,EAAKD,O,mEClBA6S,E,WAwBnB,WAAYC,EAAoBjC,EAAgBE,GAC9C7Q,KAAK4S,WAAaA,EAClB5S,KAAK2Q,OAASA,EACVE,IACF7Q,KAAK6Q,YAAcA,G,mBAQvB9O,OAAA,WACE,IAAMqC,EAAkC,CACtCwO,WAAY5S,KAAK4S,WACjBjC,OAAQ3Q,KAAK2Q,QAGf,OADI3Q,KAAK6Q,cAAazM,EAASyM,YAAc7Q,KAAK6Q,aAC3CzM,G,qFCtCUyO,E,WAoCnB,WAAYxB,GAAgB,I,MAAA,O,EANe,I,EAMf,S,EAAA,M,sFAC1BrR,KAAKkI,OAASmJ,EAAOnJ,OACrBlI,KAAK8S,kBAAoBzB,EAAOyB,kBAChC9S,KAAK2D,IAAM0N,EAAO1N,IAClB3D,KAAK+S,UAAY1B,EAAO0B,UACxB/S,KAAKgT,UAAY3B,EAAO2B,UACpB3B,EAAOX,KACTW,EAAOX,IAAIU,KAAI,SAAAV,GAAG,OAAI,EAAKA,IAAIzC,KAAK,IAAIwC,IAA6BC,O,2BASzEuC,WAAA,WACE,OAAOjT,KAAK0Q,KAAO1Q,KAAK0Q,IAAI5C,OAAS,G,EAQvCoF,aAAA,WACE,QAASlT,KAAKgT,WAAahT,KAAKgT,UAAUlF,OAAS,G,EAQrDqF,YAAA,SAAYC,GACV,IAAIC,EAAsB,GAC1B,GAAIrT,KAAK+S,WAAa/S,KAAK+S,UAAUjF,OAAS,EACV9N,KAAK+S,UAAUnN,MAAM,KAC1CL,SAAQ,SAAA9F,GACfA,IAAM2T,IACRC,EAAc5T,WAGb,GAAiB,SAAb2T,EACT,OAAOA,EAET,OAAOC,G,2FCnFUC,E,oBAgBnB,WAAYC,GAAqB,aAC/B,cAAMA,IAAN,MACUvH,WACR,EAAKwH,WAAaD,EAAYC,WAC1B,EAAKA,WAAa,IACpB,EAAKC,QAAU,GACfF,EAAYG,QAAQtC,KAAI,SAAA3I,GAAK,OAAI,EAAKgL,QAAQxF,KAAK,IAAIzF,IAAkBC,SAN9C,E,iGAhBuBqD,M,6BCJ1D,sCAAMvD,EAAQ,SAARA,EAAQxI,GACZ,IAAI4T,EAkBJ,OAjBI5F,MAAMC,QAAQjO,IAChB4T,EAAO5T,EAAK+N,OAAS,EAAI/N,EAAK0S,MAAM,GAAK,IACpClN,SAAQ,SAACqO,EAAGjW,IACG,iBAANiW,GAAkBA,IAAM,IAAQ7F,MAAMC,QAAQ4F,IAAMA,EAAE9F,OAAS,KACzE6F,EAAKhW,GAAK4K,EAAMqL,OAGK,iBAAT7T,GAChB4T,EAAOtV,OAAO6H,OAAO,GAAInG,GACzB1B,OAAOwV,KAAKF,GAAMpO,SAAQ,SAAArG,IACE,iBAAdyU,EAAKzU,IAAqByU,EAAKzU,KAAS,IAAQ6O,MAAMC,QAAQ2F,EAAKzU,KAASyU,EAAKzU,GAAK4O,OAAS,KACzG6F,EAAKzU,GAAOqJ,EAAMoL,EAAKzU,SAI3ByU,EAAO5T,EAEF4T,I,qGChBYG,E,oBAqBnB,WAAY/T,GAAc,aACxB,cAAMA,IAAN,MACKgU,QAAUhU,EAAKgU,QACpB,EAAKC,YAAcjU,EAAKiU,YACxB,EAAKC,sBAAwBlU,EAAKkU,sBAJV,E,iGArBkDpH,K,UCFzDqH,EA0FnB,SAAYnU,GACVC,KAAKgC,GAAKjC,EAAKiC,GACfhC,KAAKmU,eAAiBpU,EAAKoU,eAC3BnU,KAAKoU,QAAUrU,EAAKqU,QACpBpU,KAAKqU,QAAUtU,EAAKsU,QACpBrU,KAAK0N,MAAQ3N,EAAK2N,MAClB1N,KAAK2N,OAAS5N,EAAK4N,OACnB3N,KAAKgC,GAAKjC,EAAKiC,GACfhC,KAAKsU,UAAYvU,EAAKuU,UACtBtU,KAAKuU,WAAaxU,EAAKwU,WACvBvU,KAAKwU,MAAQzU,EAAKyU,MAClBxU,KAAKyU,gBAAkB1U,EAAK0U,gBAC5BzU,KAAK0U,aAAe3U,EAAK2U,aACzB1U,KAAKmC,OAASpC,EAAKoC,OACnBnC,KAAK2U,SAAW5U,EAAK4U,SACrB3U,KAAK4N,MAAQ7N,EAAK6N,O,EAxGwB,CAC1C5M,OAAQ,EACR4T,OAAQ,EACRC,WAAY,EACZtK,MAAO,EACPC,QAAS,EACTsK,eAAgB,EAChBC,KAAM,EACNC,iBAAkB,EAClBC,UAAW,EACXC,WAAY,EACZC,UAAW,I,gBAZMjB,G,yVCQAkB,E,oBA+BnB,WAAYhR,GAAkB,MAE5B,GAF4B,IAC5B,cAAMA,IAAN,MAD4B,UA1BU,IA0BV,iBArBM,IAqBN,kBAhBiB,IAgBjB,sBAXY,IAWZ,oBANK,KAQ5B,EAAK4H,SAAU,CAClB,IAAMqJ,EAAWjR,EAASiR,SACtBA,GACFA,EAASjE,KAAI,SAAAlF,GAAO,OAAI,EAAKmJ,SAASpH,KAAK,IAAIyE,IAA4BxG,OAE7E,IAAMoJ,EAAUlR,EAASkR,QACrBA,GACFA,EAAQlE,KAAI,SAAAhO,GACNA,EAAOxB,OAASiL,IAAkBhL,KAAKwL,mBACzC,EAAKiI,QAAQrH,KAAK,IAAI6F,EAAiD1Q,IAEvE,EAAKkS,QAAQrH,KAAK,IAAIpB,IAAkBzJ,OAI9C,IAAM1B,EAAU0C,EAAS1C,QACrBA,GACFA,EAAQ0P,KAAI,SAAAC,GAAM,OAAI,EAAK3P,QAAQuM,KAAK,IAAI4E,IAAsBxB,OAEpE,IAAMkE,EAAenR,EAASmR,aAC1BA,GACFA,EAAanE,KAAI,SAAAoE,GAAM,OAAI,EAAKD,aAAatH,KAAK,IAAIiG,EAAmBsB,OAE3E,IAAMC,EAAarR,EAASqR,WACxBA,GACFA,EAAWrE,KAAI,SAAAsE,GAAM,OAAI,EAAKD,WAAWxH,KAAK,IAAI0H,IAAcD,OA3BxC,S,kHAgC9BE,eAAA,WACE,YAAiCC,IAA1B7V,KAAK8V,kB,EAGdA,eAAA,WACE,OAAO9V,KAAKsV,QAAQS,MAAK,SAAA3S,GAAM,OAAIA,EAAOxB,OAASiL,IAAkBhL,KAAKkL,U,EAG5EiJ,iBAAA,WACE,OAAOhW,KAAKqV,U,EAQdY,0BAAA,WACE,IAAM7S,EAASpD,KAAKsV,QAAQS,MAAK,SAAA3S,GAAM,OAAIA,EAAOxB,OAASiL,IAAkBhL,KAAKwL,sBAClF,GAAIjK,aAAkB0Q,EACpB,OAAO1Q,G,GAnFuC0I,M,sMCR/BoK,EAkCnB,SAAYnW,GACVC,KAAKgC,GAAKjC,EAAKiC,GACfhC,KAAKmW,kBAAoBpW,EAAKoW,kBAC9BnW,KAAKoW,uBAAyBrW,EAAKqW,uBACnCpW,KAAKmW,kBAAoBpW,EAAKoW,kBAC9BnW,KAAKqW,mBAAqBtW,EAAKsW,mBAC/BrW,KAAKsW,SAAWvW,EAAKuW,SACrBtW,KAAKuW,QAAUxW,EAAKwW,QACpBvW,KAAKwW,QAAU,IAAIC,KAAK,GACxBzW,KAAKwW,QAAQE,cAAc3W,EAAK4W,WAChC3W,KAAK4W,QAAU,IAAIH,KAAK,GACxBzW,KAAK4W,QAAQF,cAAc3W,EAAK8W,WAChC7W,KAAKmC,OAASpC,EAAKoC,OACnBnC,KAAK8W,IAAM/W,EAAK+W,K,EA/CCZ,E,aACoC,CACrDa,aAAc,gCACdC,WAAY,gCACZC,eAAgB,oCAChBC,gBAAiB,sCACjBC,MAAO,EACPC,SAAU,EACVC,KAAM,EACNC,QAAS,EACTC,eAAgB,I,EAVCrB,E,SAayB,CAC1CsB,MAAO,EACPC,QAAS,EACTjN,QAAS,I,ICbQkN,E,oBAQnB,WAAYnE,GAAqB,aAC/B,cAAMA,IAAN,MACUvH,WACR,EAAKwH,WAAaD,EAAYC,WAC1B,EAAKA,WAAa,IACpB,EAAKmE,MAAQ,GACbpE,EAAYG,QAAQtC,KAAI,SAAAwG,GAAI,OAAI,EAAKD,MAAM1J,KAAK,IAAIiI,EAAgB0B,SANzC,E,iGARsB9L,M,+DCHzD,I,MAGqBkD,EAoBnB,WAAYD,QAA8B,IAA9BA,MAA0B,IACpC/O,KAAK4B,KAAOmN,EAAgBnN,MAAQoN,EAAyBnN,KAAKgW,eAClE7X,KAAK8X,OAAS/I,EAAgB+I,QAxBhC,oJ,EAGwC,CACtCD,eAAgB,EAChBE,eAAgB,I,cAHC/I,G,mZCCAgJ,E,WA+CnB,WAAYC,EAAgC5L,G,YAtCU,CACpDvJ,OAAO,EACPC,QAAS,EACTC,YAAa,I,EAmCoD,yB,EAAA,M,sFACjEyE,YAAUwQ,EAAQvQ,QAClB1H,KAAKkY,WAAaD,EAAQ1L,UAC1BvM,KAAKuP,UAAY0I,EAAQ9I,SACzBnP,KAAKmY,UAAYF,EAAQG,SACzBpY,KAAKqY,cAAgBJ,EAAQ3L,GAC7BtM,KAAKsY,IAAML,EAAQ3L,IAAM,GACzBtM,KAAKuY,eAAiBlM,E,qCAtCtB,OAAOrM,KAAKkY,a,+BAIZ,OAAOlY,KAAKuP,WAAavP,KAAKwY,kB,sCAI9B,MAAO,IAAMxY,KAAKkY,a,+BAIlB,OAAOlY,KAAKmY,Y,yBAIZ,OAAOnY,KAAKsY,K,aAGP1Z,GACLoB,KAAKsY,IAAM1Z,I,oCAIX,OAAOoB,KAAKuY,iB,kCAIZ,OAAOvY,KAAKqY,iB,2BAcdI,eAAA,SAAeC,GACb,OAAOnV,QAAQE,OACb,IAAI9D,IAAMA,IAAMiE,SAASxD,SAAUT,IAAMkE,SAAStD,SAAUZ,IAAMmE,KAAKzC,uBAAwB,CAC7F6K,QAAS,mE,EAMfyM,kBAAA,SAAkBC,GAChB,OAAOrV,QAAQE,OACb,IAAI9D,IAAMA,IAAMiE,SAASxD,SAAUT,IAAMkE,SAAStD,SAAUZ,IAAMmE,KAAKzC,uBAAwB,CAC7F6K,QAAS,2D,EAMf2M,mBAAA,SAAmBC,GACjB,OAAOvV,QAAQE,OACb,IAAI9D,IAAMA,IAAMiE,SAASxD,SAAUT,IAAMkE,SAAStD,SAAUZ,IAAMmE,KAAKzC,uBAAwB,CAC7F6K,QAAS,uD,EAKf6M,kBAAA,SAAkBrX,GAChB,GAAqE,IAAjEA,EAAQyP,IAAI6H,OAAOtX,EAAQwP,KAAMxP,EAAQuP,aAAanD,OACxD,MAAM,IAAInO,IAAMA,IAAMiE,SAASxD,SAAUT,IAAMkE,SAASvD,QAASX,IAAMmE,KAAK1C,oBAAqB,CAC/FgC,OAAQ,GACRiS,SAAU,gCAAgC3T,EAAQM,M,EASxD2F,YAAA,SAAYzJ,GACV,OAAOyJ,YAAYzJ,I,EAGrB0J,YAAA,SAAYC,EAAe3J,GACzB0J,YAAYC,EAAO3J,I,oCARnB,OAAOsJ,Q,mCCjGX,2CAEqByR,EAOnB,WACEjZ,KAAKkZ,MAAQ,K,mECVIC,EAgBnB,SAAYpZ,GACVC,KAAK2D,IAAM5D,EAAK4D,IAChB3D,KAAKoZ,gBAAkBrZ,EAAKqZ,kB,6BCnBhC,8CAEqBzD,EAiBnB,SAAY5V,GACVC,KAAKsO,QAAUvO,EAAKuO,QACpBtO,KAAKoZ,gBAAkBrZ,EAAK4D,IAC5B3D,KAAK0B,QAAU3B,EAAK2B,QAAU3B,EAAK2B,QAAQ0P,KAAI,SAAAC,GAAM,OAAI,IAAIwB,IAAsBxB,MAAW,K,iFCnBlG,IAEqBgI,E,sKAUZ5K,KAAP,SAAYvL,EAAoBoJ,EAAYgC,GAC1C,IAAMzL,EAA+B,IAAIpB,IACzCoB,EAAQwF,IAAI,eAAgB,oBAC5B,IAAMrE,EAAU,IAAIpB,IAAeC,GACnCmB,EAAQb,QAhBiB,oBAiBzBa,EAAQZ,OAAS,OACjBY,EAAQa,OAAS,OACjBb,EAAQL,IAAMK,EAAQf,OAAOC,GAC7Bc,EAAQqK,IAAM,yBACd,IAAMxI,EAAS,CAACkG,WAAY,wBAAyBuN,cAAehL,EAASiL,wBAAyB,KAEtG,OADAvV,EAAQ0B,OAAS,CAACG,OAAQA,EAAQyG,GAAIA,GAC/BtI,G,GArBqCmI,M,8HCQ3BqN,E,kCAQZC,MAAP,SAAaC,GACX,IAAMlN,EAASpE,IAAiB5J,MAC1Bmb,EAA2BnN,EAAOtJ,WAAW0W,OAAO,EAAGpN,EAAOtJ,WAAW2W,YAAY,MACpFtN,EAA4EmN,EAA5EnN,UAAW+B,EAAiEoL,EAAjEpL,QAAShC,EAAwDoN,EAAxDpN,GAAI8L,EAAoDsB,EAApDtB,SAAUlQ,EAA0CwR,EAA1CxR,OAAQkL,EAAkCsG,EAAlCtG,SAAU0G,EAAwBJ,EAAxBI,UAAW9G,EAAa0G,EAAb1G,UAGtE,KAAK2G,GAAqBpN,GAAc+B,GAAYpG,GAAWkL,GAC7D,MAAO,GAGT,IAAI2G,EAAUJ,EAwBd,OAvBKA,EAAiBK,SAAS,OAC7BD,GAAW,KAEbA,GAAW,KAAOxN,EAAY,OAASA,EAA5B,2BAA0E+B,EAAU,aAAe8E,EAAW,WAAalL,EAElI8K,EACF+G,GAAW,cAAgB/G,EAClBoF,IACT2B,GAAW,aAAe3B,GAGjB,KAAP9L,IACFyN,GAAW,OAASzN,GAGJ,KAAdwN,IACFC,GAAW,MAAQD,GAGjB1B,GAA0B,KAAdpF,IACd+G,GAAW,aAAe3B,GAGrB2B,G,KCvDUE,E,kCAOZC,UAAP,SAAiBpD,GACf,IAAIqD,EAAM,GACV,GAAqB,IAAjBrD,EAAIsD,UACN,GAAItD,EAAIuD,WAAWvM,OAAS,EAAG,CAC7BqM,EAAI,eAAiB,GACrB,IAAK,IAAIG,EAAI,EAAGA,EAAIxD,EAAIuD,WAAWvM,OAAQwM,IAAK,CAC9C,IAAIC,EAAYzD,EAAIuD,WAAWG,KAAKF,GACpCH,EAAI,eAAeI,EAAUE,UAAYF,EAAUG,iBAG7B,IAAjB5D,EAAIsD,WACbD,EAAMrD,EAAI4D,WAEZ,GAAI5D,EAAI6D,gBACN,IAAK,IAAIhd,EAAI,EAAGA,EAAImZ,EAAI8D,WAAW9M,OAAQnQ,IAAK,CAC9C,IAAI6c,EAAO1D,EAAI8D,WAAWJ,KAAK7c,GAC3B8c,EAAWD,EAAKC,SACpB,QAA6B,IAAlBN,EAAIM,GACbN,EAAIM,GAAYza,KAAKka,UAAUM,OAC1B,CACL,QAAkC,IAAvBL,EAAIM,GAAUxM,KAAsB,CAC7C,IAAI4M,EAAMV,EAAIM,GACdN,EAAIM,GAAY,GAChBN,EAAIM,GAAUxM,KAAK4M,GAErBV,EAAIM,GAAUxM,KAAKjO,KAAKka,UAAUM,KAIxC,OAAOL,G,2CCjCUW,EA6BnB,WACE9a,KAAKkZ,MAAQ,I,gBC9BX6B,G,WAAkC,CACtCC,IAAK,IACLC,KAAM,IACNC,OAAQ,IACRC,IAAK,MAGDC,EAAiD,CACrD,EAAK,MACL,EAAK,OAGDC,E,kCACGC,aAAP,SAAoBC,EAAyBjP,GAC3C,OAAOiP,EAASnK,KAAI,SAAAoK,GAClB,IAAI7X,EAAM6X,EAAQ7X,IACd/B,EAAOwZ,EAAmBI,EAAQtT,QAMtC,MALI,CAAC6S,EAAmBE,KAAMF,EAAmBI,KAAKM,SAASD,EAAQtT,UACrEvE,EAAM6X,EAAQE,UACd9Z,EAAOwZ,EAAmBL,EAAmBG,SAE/CvX,EAAMgY,EAAWhY,EAAK2I,GACf,CACLsP,UAAWJ,EAAQK,UACnBja,KAAMA,EACN+S,SAAU6G,EAAQM,aAClBlO,MAAO4N,EAAQ5N,MACfjK,IAAKA,O,eCPPoY,E,kCAcGC,cAAP,SAAqB1P,EAAYC,EAAmB6L,EAAmB6D,GACrE,IAAMC,EAAa,IAAI3a,IACjBkH,EAAQwT,EAAmBxT,MAC3B0T,EAAkBF,EAAmBG,sBACrCC,EAAeJ,EAAmBK,mBAClCC,EAAiBJ,EAAgBza,QAOvC,OALAwa,EAAWxa,QAAUqa,EAAkBS,kBAAkBD,EAAgBjQ,EAAIC,EAAW6L,EAAU3P,EAAO0T,GACrG/T,IAAiB5J,MAAM2J,gBAAkBgU,EAAgBpc,KAAK0c,mBAChEP,EAAWxa,QAAQ6Z,SAAWF,EAAwBC,aAAaa,EAAgBpc,KAAK0c,iBAAkBnQ,IAE5GyP,EAAkBW,cAAcR,EAAYzT,EAAO4T,GAC5CH,G,EAYFP,WAAP,SAAkBhY,EAAa2I,GAC7B,IAKIqQ,EACJ,OAAIrQ,GAEAqQ,GAL0C,IAIxBhZ,EANUiC,MAAM,KAAK,GACGgX,QAAQ,WAAY,IACtC5W,QAAQ,MAKA,IAAtBrC,EAAIqC,QAAQ,KAAc,OAAS,OAEnC,OAELrC,EAAMgZ,EAAUrQ,GAElB3I,G,EAWFkZ,YAAP,SAAmBC,GACjB,IAAMC,EAAW,IAAIjC,EACfkC,EAAeF,EAAiBE,aAChCC,EAAgBH,EAAiBG,cAAcxJ,QAUrD,OATAsJ,EAAS/a,GAAKgb,EAAahb,GAC3B+a,EAAS7e,KAAO8e,EAAa9e,KAC7B6e,EAASnU,YAAcoU,EAAapU,YACpCmU,EAAS3a,OAAS4a,EAAa5a,OAC/B6a,EAAc1X,SAAQ,SAACkD,GACrB,IAAMyT,EAAa,IAAI3a,IACvBwa,EAAkBW,cAAcR,EAAYzT,GAC5CsU,EAAS7D,MAAMjL,KAAKiO,MAEfa,G,EAWFG,aAAP,SAAoBJ,GAClB,IAAMK,EAAY,IAAIlE,IAOtB,OANsB6D,EAAiBG,cAAcxJ,QACvClO,SAAQ,SAAAkD,GACpB,IAAMyT,EAAa,IAAI3a,IACvBwa,EAAkBW,cAAcR,EAAYzT,GAC5C0U,EAAUjE,MAAMjL,KAAKiO,MAEhBiB,G,EAaFC,UAAP,SAAiBC,EAAoB/Q,EAAYC,GAC/C,IAAM4P,EAAkBkB,EAAcjB,sBAChC3G,EAA4B0G,EAAgB1G,WAAW,GAC7D,GAAIA,EAAY,CACd,IACM6H,GADgB7H,GAAcA,EAAW/T,SACPqU,MAAK,SAAAL,GAAM,OAAI/J,YAAoB+J,EAAOxN,WAClF,GAAIoV,EAAmB,CACrB,IAAMC,EAAgBxB,EAAkByB,yBAAyBF,EAAmBnB,EAAiB7P,EAAIC,EAAW,EAAGkJ,EAAWnH,SAClI,GAAIiP,EAAc,GAChB,OAAO,IAAIpE,IAAO,CAACxV,IAAK4Z,EAAc,GAAG5Z,IAAKyV,gBAAiB3D,EAAW2D,qB,EAM3EsD,cAAP,SAAqBR,EAAwBzT,EAA0B4T,GAerE,OAdAH,EAAW9Z,OAASqG,EAAMrG,OAC1B8Z,EAAWla,GAAKyG,EAAMzG,GACtBka,EAAWja,SAAWwG,EAAMxG,SAC5Bia,EAAW1a,SAAWua,EAAkB0B,eAAepB,GACvDH,EAAW1a,SAASoH,YAAcH,EAAMG,aAAe,GACvDsT,EAAW1a,SAAStD,KAAOuK,EAAMvK,MAAQ,GACzCge,EAAW1a,SAAS0H,KAAOT,EAAMS,MAAQ,GACzCgT,EAAW/Z,OAASsG,EAAMtG,OAE1B+Z,EAAWta,KAAOma,EAAkB2B,cAAcjV,EAAMK,UAAWL,EAAM7G,MACrEsa,EAAWta,OAASL,IAAWM,KAAKU,OACtC2Z,EAAWha,UAAYuG,EAAMvG,WAGxBga,G,EAGFwB,cAAP,SAAqBC,EAAuBC,GAC1C,IAAIhc,EAAOL,IAAWM,KAAKC,QAC3B,OAAQ6b,GACN,KAAKnV,IAAkBqV,UAAUrb,MAAM5D,MACrCgD,EAAOL,IAAWM,KAAKW,MACvB,MACF,KAAKgG,IAAkBqV,UAAUpb,MAAM7D,MACrCgD,EAAOL,IAAWM,KAAKY,MACvB,MACF,QACE,OAAQmb,GACN,KAAKpV,IAAkBsV,UAAUzU,WAAWzK,MAC1CgD,EAAOL,IAAWM,KAAKS,IACvB,MACF,KAAKkG,IAAkBsV,UAAUrU,YAAY7K,MAC7C,KAAK4J,IAAkBsV,UAAUpU,aAAa9K,MAC5CgD,EAAOL,IAAWM,KAAKU,KACvB,MACF,QACEX,EAAOL,IAAWM,KAAKC,SAG/B,OAAOF,G,EAgBF4a,kBAAP,SACED,EACAjQ,EACAC,EACA6L,EACA3P,EACA0T,GAEA,IAYQ4B,EAQAC,EApBFtc,EAAU,IAAIC,IACdsc,EAAoB,SAAC5M,GACzB,IAAM6M,EAAenC,EAAkBoC,qBAAqB9M,EAAQ8K,EAAiB7P,EAAIC,EAAW6L,EAAU3P,EAAMzG,IACpH,GAAIkc,EAAc,CAChB,IAAMrS,EAAeH,IAAsBlN,IAAI6S,EAAOnJ,QACtDxG,EAAQ0P,IAAI8M,EAAcrS,KA4B9B,OANIpD,EAAM7G,OAAS4G,IAAkBsV,UAAU1U,eAAexK,QAPtDof,EAAc,IAAIzQ,KACZC,SAAW,gBACvBwQ,EAAYra,IAAM8E,EAAMC,YACxBsV,EAAYhc,GAAKyG,EAAMzG,GAAK,WAC5BN,EAAQuP,YAAYhD,KAAK+P,IAKhBzB,GAAkBA,EAAezO,OAAS,IApBnDyO,EAAe1W,QAAO,SAAAwL,GAAM,OAAK1F,YAAoB0F,EAAOnJ,WAAS3C,QAAQ0Y,GAGvEF,EAAoBxB,EAAexG,MAAK,SAAA1E,GAE5C,OAAO1F,YAAoB0F,EAAOnJ,SAAwE,KAA7DmJ,EAAO8B,YAAY4I,EAAkBqC,uBAEpF1c,EAAQuP,YAAc8K,EAAkByB,yBAAyBO,EAAmB5B,EAAiB7P,EAAIC,EAAW6L,EAAU3P,EAAMzG,KAiB/HN,G,EAgBFyc,qBAAP,SACEE,EACAlC,EACA7P,EACAC,EACA6L,EACA9J,GAEA,IAAM0P,EAA2B,IAAIzQ,IACrC,GAAI8Q,EAAe,CACjB,IAAItE,EAAkB,GAChBzI,EAAc5F,IAAsBlN,IAAI6f,EAAcnW,QACtDkL,EAAWiL,EAAclL,YAAY4I,EAAkBqC,oBACvDtL,EAAoBuL,EAAcvL,kBAClC5K,EAASmW,EAAcnW,OACzB4R,EAAoB,GAuBxB,GAtBIxI,IACFwI,EAAYxI,EAAYjG,QACxB2S,EAAYxQ,SAAW8D,EAAYlG,UAGjCiT,EAAcnL,iBACX4G,GAAaqC,EAAgB5G,cAAgB4G,EAAgB5G,aAAazH,OAAS,IACtFgM,EAAYqC,EAAgB5G,aAAa,GAAGnB,SAE9C2F,EAAUP,EAAqBC,MAAM,CACnCnL,UACA0E,UAAWqL,EAAcrL,UACzB9K,SACAoE,KACAC,YACA6L,WACA0B,YACA1G,cAGF2G,EAAUgC,EAAkBJ,WAAW0C,EAAc1a,IAAK2I,IAEvDyN,EAAS,CACZ,IAAM7N,EAAU,8DAA8DoC,EAAjE,IAA4EwE,EAA5E,MAAmG5K,EAEhH,OADA6T,EAAkB9b,QAAQsH,KAAK2E,GACxB,KAIT,GAFA8R,EAAYra,IAAMoY,EAAkBuC,kBAAkBnC,EAAiBpC,GACvEiE,EAAYhc,GAAKsM,EAAU,IAAMwE,EAAoB,IAAM5K,EACvDmW,EAAcpL,aAAc,CAC9B,IAAMsL,EAAwB,GAC9BF,EAAc3N,IAAInL,SAAQ,SAAAmL,GACxB6N,EAAUtQ,KAAK,IAAI0E,IAAIjC,EAAIE,WAAYH,IAA6B+N,OAAO9N,EAAIC,QAASD,EAAIG,iBAE9FmN,EAAYnQ,QAAU0Q,GAG1B,OAAOP,G,EAgBFR,yBAAP,SACEa,EACAlC,EACA7P,EACAC,EACA6L,EACA9J,GAEA,IAAMmQ,EAAmC,GACnCC,EAAmC,GACzC,GAAIL,EAAe,CACjB,IAAMjL,EAAWiL,EAAclL,YAAY4I,EAAkBqC,oBACvDlW,EAASmW,EAAcnW,OACvB4K,EAAoBuL,EAAcvL,kBAClC6L,EAAW7L,EAAoB,IAAM5K,EAC3CiU,EAAgB5G,aAAanE,KAAI,SAAAoE,GAC/B,IAAMwI,EAA2B,IAAIzQ,IACrCyQ,EAAYhc,GAAKwT,EAAOxT,GAAK2c,EAC7BX,EAAYxQ,SAA8B,QAAnBgI,EAAOpB,QAAoB,YAAc,YAChE4J,EAAYrQ,OAAS6H,EAAO7H,OAC5BqQ,EAAYtQ,MAAQ8H,EAAO9H,MAC3BsQ,EAAYvQ,UAA6B,KAAjB+H,EAAOnB,QAC/B2J,EAAYpQ,MAAQ4H,EAAO5H,OAAS4H,EAAOb,SAC3C,IAAMoF,EAAUP,EAAqBC,MAAM,CACzCnL,UACA0E,UAAWwC,EAAOxT,GAClBkG,SACAoE,KACAC,UAAWA,EACX6L,SAAUA,EACV0B,UAAWtE,EAAOpB,QAClBhB,aAEF,GAAgB,KAAZ2G,EAEF,OADAgC,EAAkB9b,QAAQsH,KAA1B,8DAA6F+G,EAA7F,IAAwGwE,EAAxG,MAA+H5K,EAA/H,KACO,KAEP8V,EAAYra,IAAMoY,EAAkBuC,kBAAkBnC,EAAiBpC,GACnEvE,EAAO7H,QAAU6H,EAAO9H,MAC1B+Q,EAAaxQ,KAAK+P,GAElBU,EAAazQ,KAAK+P,MAM1B,OAAOU,EAAa5Q,SAAW2Q,EAAa3Q,OAAS4Q,EAAeD,G,EAW/DhB,eAAP,SAAsBpB,GACpB,IAAM7a,EAAW,GAkBjB,OAjBI6a,GAAgBA,EAAa1E,OAAS0E,EAAa1E,MAAM7J,OAAS,GACpEuO,EAAa1E,MAAMpS,SAAQ,SAAAqS,GACzB,GAAIA,EAAKd,IAAK,CACZ,IAAI8H,EACEC,EAAuB,IAAIC,UACjClH,EAAKd,IAAMc,EAAKd,IAAI8F,QAAQ,YAAa,IACzChF,EAAKd,IAAMc,EAAKd,IAAI8F,QAAQ,QAAS,KACrChF,EAAKd,IAAMc,EAAKd,IAAI8F,QAAQ,QAAS,KACrCgC,EAAUC,EAAUE,gBAAgBnH,EAAKd,IAAK,YAC9C,IAAMkI,EAAmB/E,EAAUC,UAAU0E,GAC5BvgB,OAAOwV,KAAKmL,EAASxd,UAC7B+D,SAAQ,SAAArG,GACfsC,EAAStC,GAAO8f,EAASxd,SAAStC,GAAK,gBAKxCsC,G,EAUF4c,iBAAP,WACE,IAAM5R,EAASpE,IAAiB5J,MAE1B+R,EADgB,WACO0O,KAAKzS,EAAOzE,QACnCqL,EAAW7C,EAASA,EAAO,GAAK2O,SAASC,SAAS/L,SACxD,MAAwB,iBAAbA,EACFA,EAASX,MAAM,GAAI,GAErB,S,EAGFmD,eAAP,SAAsBxR,GACpB,OAAOA,EAASgY,sBAAsBxG,kB,EAGjCE,eAAP,SAAsB1R,GACpB,OAAOA,EAASgY,sBAAsBtG,kB,EAGjCE,iBAAP,SAAwB5R,GACtB,OAAOA,EAASgY,sBAAsBpG,oB,EAYjCsI,kBAAP,SAAyBnC,EAAyCpC,GAChE,IAAMqF,EAAcjD,EAAgBlG,4BACpC,GAAImJ,EAAa,CACf,IAAMC,EAAQ,IAAIC,OAAOF,EAAYrL,QAAS,KAC9C,GAAIgG,EAAQwF,MAAMF,GAChB,OAAOtF,EAAQ6C,QAAQyC,EAAOD,EAAYpL,YAAc,KAG5D,OAAO+F,G,OAjbLgC,E,cACaza,YAAU,qB,6FAobtB,IAAMqa,EAAaI,EAAkBJ,WAC7BI,I,kQC7bMyD,E,WAenB,WAAY9Z,I,6GAAgB,kBAXX,IAYf1F,KAAKqP,SAAWrP,KAAKsP,cAAc5J,GACnC1F,KAAKyf,SAAW/Z,EAAO4I,QACvBtO,KAAK0f,aAAeha,EAAOgD,Y,mCAX3B,MAAO,Y,2BAwCT4G,cAAA,SAAc5J,GACZ,IAAM8G,EAASpE,IAAiB5J,MAC1B6Q,EAAkC,GACxCA,EAASpB,KAAKC,IAAoBO,KAAKjC,EAAOtJ,WAAYwC,EAAO4G,GAAI5G,EAAO4I,QAAS5I,EAAOgJ,oBAAqBhJ,EAAOgD,cAExH,IAAM0F,EAA+B,kBAAd1I,EAAO4G,GAAyB,0BAA4B,0BAGnF,OAFA+C,EAASpB,KAAKC,IAAoBC,mBAAmB3B,EAAOtJ,WAAYwC,EAAO4G,GAAI8B,IACnFiB,EAASpB,KAAKoL,IAAmB5K,KAAKjC,EAAOtJ,WAAYwC,EAAO4G,GAAI8B,IAC7DiB,G,EAQTK,QAAA,WACE,SAAU1P,KAAKyf,WAAYzf,KAAK0f,e,kCA3CrBrQ,GACXrP,KAAKwP,UAAYH,G,eAIjB,OAAOrP,KAAKwP,Y,6BAGDpL,GACX,IAAI6X,EAAmD,IAAI3I,IAA6BlP,EAAS,GAAGrE,MACpGC,KAAKyP,UAAUhH,MAAQwT,EAAmBxI,QAAQ,GAClDzT,KAAKyP,UAAU2M,sBAAwB,IAAIhH,IAAuBhR,EAAS,GAAGrE,MAC9EC,KAAKyP,UAAU6M,mBAAqB,IAAI5E,IAA4BtT,EAAS,GAAGrE,O,eAIhF,OAAOC,KAAKyP,c,gCC3CKkQ,E,oBACnB,WAAYtT,EAAuBE,EAAmBD,EAAiBmF,GAAoD,sBAArEnF,MAAa,KACjE,cAAMmF,IAAN,MACKM,cAAgB5F,IAAWC,gBAAgBC,EAAeC,EAAIC,GAFsD,E,iGAD3EiF,K,QCNlD,IAEqBoO,E,sKAUZ9P,QAAP,SAAe5M,EAAoBoJ,EAAYuT,GAC7C,IAAMhd,EAA+B,IAAIpB,IACzCoB,EAAQwF,IAAI,eAAgB,oBAC5B,IAAMrE,EAAU,IAAIpB,IAAeC,GAWnC,OAVAmB,EAAQb,QAhBiB,WAiBzBa,EAAQZ,OAAS,UACjBY,EAAQa,OAAS,OACjBb,EAAQL,IAAMK,EAAQf,OAAOC,GAC7Bc,EAAQqK,IAASyR,mBACjB9b,EAAQ0B,OAAS,CACf4G,GAAIA,EACJtK,GAAI6d,EACJ9Q,gBAAiB,IAAIC,KAEhBhL,G,EAYFxF,IAAP,SAAW0E,EAAoBoJ,EAAYuT,GACzC,IAAMhd,EAA+B,IAAIpB,IACzCoB,EAAQwF,IAAI,eAAgB,oBAC5B,IAAMrE,EAAU,IAAIpB,IAAeC,GAcnC,OAbAmB,EAAQb,QA1CiB,WA2CzBa,EAAQZ,OAAS,MACjBY,EAAQa,OAAS,OACjBb,EAAQL,IAAMK,EAAQf,OAAOC,GAC7Bc,EAAQqK,IAASyR,eACjB9b,EAAQ0B,OAAS,CACf4G,GAAIA,EACJtK,GAAI6d,EACJ9Q,gBAAiB,CACf+I,OAAQ,mCACRlW,KAAM,IAGHoC,G,GArDqCmI,KCL3B4T,EA0BnB,SAAYhD,GACV/c,KAAKgC,GAAK+a,EAAS/a,GACnBhC,KAAK9B,KAAO6e,EAAS7e,KACrB8B,KAAK4I,YAAcmU,EAASnU,YAC5B5I,KAAKoC,OAAS2a,EAAS9T,c,IC5BN+W,E,oBAWnB,WAAYzM,GAAqB,aAC/B,cAAMA,IAAN,MACUvH,WACR,EAAKyH,QAAU,GACfF,EAAYnC,KAAI,SAAA3I,GAAK,OAAI,EAAKgL,QAAQxF,KAAK,IAAIzF,IAAkBC,QAJpC,E,sGAXcqD,G,mOCG5BmU,E,WAanB,WAAYva,I,6GAAgB,kBAVX,IAWf1F,KAAKqP,SAAWrP,KAAKsP,cAAc5J,GACnC1F,KAAKkgB,YAAcxa,EAAOma,W,mCAT1B,MAAO,e,2BAoCTvQ,cAAA,SAAc5J,GACZ,IAAM8G,EAASpE,IAAiB5J,MAC1B6Q,EAAkC,GAGxC,OAFAA,EAASpB,KAAK2R,EAAmBphB,IAAIgO,EAAOtJ,WAAYwC,EAAO4G,GAAI5G,EAAOma,aAC1ExQ,EAASpB,KAAK2R,EAAmB9P,QAAQtD,EAAOtJ,WAAYwC,EAAO4G,GAAI5G,EAAOma,aACvExQ,G,EAQTK,QAAA,WACE,QAAS1P,KAAKkgB,a,kCAtCH7Q,GACXrP,KAAKwP,UAAYH,G,eAIjB,OAAOrP,KAAKwP,Y,6BAGDpL,GACXpE,KAAKyP,UAAUuN,aAAe,IAAI+C,EAAgB3b,EAAS,GAAGrE,MAC9DC,KAAKyP,UAAUwN,cAAgB,IAAI+C,EAAoB5b,EAAS,GAAGrE,O,eAInE,OAAOC,KAAKyP,c,gPCjCK0Q,E,WAanB,WAAYza,I,6GAAgB,kBAVX,CAACuX,cAAe,CAACxJ,QAAS,MAWzCzT,KAAKqP,SAAWrP,KAAKsP,cAAc5J,GACnC1F,KAAKogB,SAAW1a,EAAO+N,Q,mCATvB,MAAO,iB,2BAuCTnE,cAAA,SAAc5J,GACZ,IAAM8G,EAASpE,IAAiB5J,MAC1B6Q,EAAkC,GAIxC,OAHA3J,EAAO+N,QAAQlO,SAAQ,SAAAkD,GACrB4G,EAASpB,KAAKC,IAAoBO,KAAKjC,EAAOtJ,WAAYwC,EAAO4G,GAAI7D,EAAM6F,SAAW7F,EAAO/C,EAAOgJ,oBAAqBjG,EAAMC,iBAE1H2G,G,EAQTK,QAAA,WACE,SAAU1P,KAAKogB,WAAYpgB,KAAKogB,SAAStS,S,kCA1C9BuB,GACXrP,KAAKwP,UAAYH,G,eAIjB,OAAOrP,KAAKwP,Y,6BAGDpL,GAAe,IACtB6X,EADsB,OAE1B7X,EAASmB,SAAQ,SAAAiV,GACfyB,EAAqB,IAAI3I,IAA6BkH,EAAKza,MAC3D,EAAK0P,UAAUwN,cAAcxJ,QAAQxF,KAAKgO,EAAmBxI,QAAQ,Q,eAKvE,OAAOzT,KAAKyP,c,gBC3BK4Q,E,oBAOnB,WAAYpI,EAAgC5L,GAAuB,a,6GAAA,C,yHAAA,CACjE,cAAM4L,EAAS5L,IAAf,MADiE,uBANf,CAACqC,qBAAqB,IAQxE,EAAKzO,QAAUqB,YAAU,eACzB8G,IAAiBC,IAAI4P,EAAQqI,KAC7B,EAAKC,wBAAwBtI,EAAQuI,eACrC,EAAK9O,oBAAsBrT,OAAO6H,OAAO,EAAKwL,oBAAqBuG,EAAQwI,wBALV,E,kHAanEhI,eAAA,SAAeC,GAA2E,WASxF,OARIA,EAAUpM,KACZtM,KAAKsM,GAAKoM,EAAUpM,GACpBtM,KAAKqY,cAAe,GAElBrY,KAAKmP,WAAanP,KAAKwY,kBACzBxY,KAAKqY,cAAe,GAEtBrY,KAAK0gB,YAAc,IAAIf,EAAqB3f,KAAKqM,cAAerM,KAAKuM,UAAWvM,KAAKsM,GAAItM,KAAK0R,qBACvF,IAAInO,SAAQ,SAACC,EAASC,GAC3B,IAAM6K,EAAUoK,EAAUpK,QACpB5F,EAAcgQ,EAAUhQ,YAC9B,GAAI4F,GAAW5F,EAAa,CAC1B,IAAI4D,EAAa,EAAKA,GACjBA,IACHA,EAAK,gBACL,EAAKoU,YAAY/Q,IAAIP,IAAkB,CAACD,SAAU,EAAKA,YAEzD,IAAMT,EAAsB,EAAKiS,wBAAwBjI,GAEzD,OADA,EAAKgI,YAAY/Q,IAAI6P,EAAqB,CAAClR,UAAShC,KAAIoC,sBAAqBhG,gBACtE,EAAKgY,YAAYrO,YAAYnC,MAClC,SAAA9L,GACE,IACEZ,EAAQ,EAAKod,uBAAuBxc,IACpC,MAAO4L,GACPvM,EAAOuM,OAGX,SAAAA,GACEvM,EAAOuM,MAIXvM,EAAO,IAAI9D,IAAMA,IAAMiE,SAASxD,SAAUT,IAAMkE,SAAStD,SAAUZ,IAAMmE,KAAK3C,yBAA0B,CAAC+K,QAAS,0B,EAKxHyU,wBAAA,SAAwBjI,GACtB,MAAgD,kBAAlCA,EAAUhK,oBACpBgK,EAAUhK,oBAC+C,kBAAlD1O,KAAK6gB,qBAAqBnS,qBACjC1O,KAAK6gB,qBAAqBnS,qB,EAIhC6R,wBAAA,SAAwBtI,GAClBA,GAAiD,kBAA/BA,EAAQvJ,sBAC5B1O,KAAK6gB,qBAAqBnS,oBAAsBuJ,EAAQvJ,sB,EAI5DkS,uBAAA,SAAuB7gB,GACrBC,KAAKC,QAAQ2G,MAAM,wBACnB,IAAMka,EAAyC,CAC7CC,QAAS,CACPC,YAAahhB,KAAKqY,aAClB9L,UAAWvM,KAAKuM,WAElB7K,QAAS1B,KAAKihB,2BACdC,QAAS,IAMX,GAHIlhB,KAAKoY,WACP0I,EAAYC,QAAQ3I,SAAWpY,KAAKoY,UAElCrY,EAAM,CACR,GAAIA,EAAKohB,IAAI/R,IAAiBpN,IAAK,CACjC,IAAMof,EAAgBrhB,EAAKvB,IAAI4Q,IAAiBpN,IAC5Cof,GAAiBA,EAAchd,WACjC0c,EAAYC,QAAQzU,GAAK8U,EAAchd,SACnCpE,KAAKmP,WAAanP,KAAKwY,kBACzBxY,KAAKsM,GAAKwU,EAAYC,QAAQzU,UAIlCwU,EAAYC,QAAQzU,GAAKtM,KAAKsM,GAEhC,GAAIvM,EAAKohB,IAAI3B,EAAoBxd,IAAK,CACpC,IAAMqf,EAActhB,EAAKvB,IAAIghB,EAAoBxd,IACjD,GAAIqf,GAAeA,EAAYjd,SAAU,CACvC,IAAMA,EAAYid,EAAkCjd,SACpD,GAAI2X,EAAkBnG,eAAexR,GACnC,MAAM,IAAIzE,IAAMA,IAAMiE,SAASxD,SAAUT,IAAMkE,SAASvD,QAASX,IAAMmE,KAAK7C,aAAc,CACxFmC,OAAQ2Y,EAAkBjG,eAAe1R,GACzCiR,SAAU0G,EAAkB/F,iBAAiB5R,KAGjD,IAAM8X,EAAaH,EAAkBC,cAAchc,KAAKghB,YAAc,GAAKhhB,KAAKsM,GAAItM,KAAKuM,UAAWvM,KAAKoY,SAAUhU,GACnH/F,OAAO6H,OAAO4a,EAAYpf,QAAS1B,KAAKshB,kBAAkBpF,IAC1Dlc,KAAKuhB,mBAAmBrF,GACxBlc,KAAK+Y,kBAAkB+H,EAAYpf,SACnC,IAAMgU,EAASqG,EAAkBqB,UAAUhZ,EAAUpE,KAAKghB,YAAc,GAAKhhB,KAAKsM,GAAItM,KAAKuM,WACvFmJ,GACFrX,OAAO6H,OAAO4a,EAAYI,QAAS,CAACxL,aAM5C,OADA1V,KAAKC,QAAQ2G,MAAM,wBAAyBka,GACrCA,G,EAQTS,mBAAA,SAAmBrF,GACjB,GAAI,CAAC1T,IAAkBgZ,YAAYpX,OAAQ5B,IAAkBgZ,YAAYlX,YAAYmR,SAASS,EAAW/Z,QACvG,MAAM,IAAIxC,IAAMA,IAAMiE,SAASxD,SAAUT,IAAMkE,SAASvD,QAASX,IAAMmE,KAAK5C,uBAAwB,CAClGmU,SAAU,sBAAsB6G,EAAWla,GAAnC,OAA4Cka,EAAW/Z,OAAvD,4CACRpC,KAAM,CAACoC,kB,EASbwW,kBAAA,SAAkBC,GAA2E,WAS3F,OARIA,EAAatM,KACftM,KAAKsM,GAAKsM,EAAatM,GACvBtM,KAAKqY,cAAe,GAElBrY,KAAKmP,WAAanP,KAAKwY,kBACzBxY,KAAKqY,cAAe,GAEtBrY,KAAK0gB,YAAc,IAAIf,EAAqB3f,KAAKqM,cAAerM,KAAKuM,UAAWvM,KAAKsM,GAAItM,KAAK0R,qBACvF,IAAInO,SAAQ,SAACC,EAASC,GAC3B,IAAMoc,EAAajH,EAAaiH,WAChC,GAAIA,EAAY,CACd,IAAIvT,EAAa,EAAKA,GACjBA,IACHA,EAAK,gBACL,EAAKoU,YAAY/Q,IAAIP,IAAkB,CAACD,SAAU,EAAKA,YAEzD,EAAKuR,YAAY/Q,IAAIsQ,EAAmB,CAACJ,aAAYvT,OACrD,EAAKoU,YAAYrO,YAAYnC,MAC3B,SAAA9L,GACEZ,EAAQ,EAAKie,+BAA+Brd,OAE9C,SAAA4L,GACEvM,EAAOuM,WAIXvM,EAAO,CAAC4M,SAAS,EAAOtQ,KAAM,oC,EAKpC0hB,+BAAA,SAA+B1hB,GAAqD,WAClFC,KAAKC,QAAQ2G,MAAM,wBACnB,IAAM8a,EAAyC1hB,KAAK2hB,qBACpD,GAAI5hB,GAAQA,EAAKohB,IAAIlB,EAAkBje,IAAK,CAC1C,IAAM4f,EAAiB7hB,EAAKvB,IAAIyhB,EAAkBje,IAClD,GAAI4f,GAAkBA,EAAexd,SAAU,CAC7C,IAAM2Y,EAAWhB,EAAkBc,YAAY+E,EAAexd,UAC9Dsd,EAAe1f,GAAK+a,EAAS/a,GAC7B0f,EAAetf,OAAS2a,EAAS3a,OACjCsf,EAAelgB,SAAStD,KAAO6e,EAAS7e,KACxCwjB,EAAelgB,SAASoH,YAAcmU,EAASnU,YAC/CmU,EAAS7D,MAAM3T,SAAQ,SAAA5H,GAAC,OAAI+jB,EAAexI,MAAMjL,KAAK,CAACvM,QAAS,EAAK4f,kBAAkB3jB,SAI3F,OADAqC,KAAKC,QAAQ2G,MAAM,wBAAyB8a,GACrCA,G,EAQT7I,mBAAA,SAAmBC,GAAyE,WAS1F,OARIA,EAAcxM,KAChBtM,KAAKsM,GAAKwM,EAAcxM,GACxBtM,KAAKqY,cAAe,GAElBrY,KAAKmP,WAAanP,KAAKwY,kBACzBxY,KAAKqY,cAAe,GAEtBrY,KAAK0gB,YAAc,IAAIf,EAAqB3f,KAAKqM,cAAerM,KAAKuM,UAAWvM,KAAKsM,GAAItM,KAAK0R,qBACvF,IAAInO,SAAQ,SAACC,EAASC,GAC3B,IAAMgQ,EAAUqF,EAAcrF,QAC9B,GAAIA,GAAWA,EAAQ3F,OAAQ,CAC7B,IAAIxB,EAAa,EAAKA,GACjBA,IACHA,EAAK,gBACL,EAAKoU,YAAY/Q,IAAIP,IAAkB,CAACD,SAAU,EAAKA,YAEzD,IAAMT,EAAsB,EAAKiS,wBAAwB7H,GACzD,EAAK4H,YAAY/Q,IAAIwQ,EAAoB,CAAC1M,UAASnH,KAAIoC,wBACvD,EAAKgS,YAAYrO,YAAYnC,MAC3B,SAAA9L,GACEZ,EAAQ,EAAKqe,gCAAgCzd,OAE/C,SAAA4L,GACEvM,EAAOuM,WAIXvM,EAAO,CAAC4M,SAAS,EAAOtQ,KAAM,oC,EAKpC8hB,gCAAA,SAAgC9hB,GAAqD,WACnFC,KAAKC,QAAQ2G,MAAM,wBACnB,IAAM8a,EAAyC1hB,KAAK2hB,qBACpD,GAAI5hB,GAAQA,EAAKohB,IAAIhB,EAAmBne,IAAK,CAC3C,IAAM4f,EAAiB7hB,EAAKvB,IAAI2hB,EAAmBne,IACnD,GAAI4f,GAAkBA,EAAexd,SACjB2X,EAAkBmB,aAAa0E,EAAexd,UACtD8U,MAAM3T,SAAQ,SAAA5H,GAAC,OAAI+jB,EAAexI,MAAMjL,KAAK,CAACvM,QAAS,EAAK4f,kBAAkB3jB,QAI5F,OADAqC,KAAKC,QAAQ2G,MAAM,wBAAyB8a,GACrCA,G,EAGTC,mBAAA,WACE,MAAO,CACL3f,GAAI,GACJR,SAAU,CACRtD,KAAM,GACN0K,YAAa,IAEfxG,OAAQ,GACR8W,MAAO,K,EAIX+H,yBAAA,WACE,MAAO,CACL9P,IAAK,GACLD,KAAM,GACND,YAAa,GACbjP,GAAI,GACJC,SAAU,EACVL,KAAML,IAAWM,KAAKC,QACtBM,OAAQ,GACR0f,KAAK,EACLC,GAAI,KACJvgB,SAAU,CACRtD,KAAM,GACN0K,YAAa,GACbM,KAAM,M,EAKZoY,kBAAA,SAAkBpF,GAChB,IAAM8F,EAAkDhiB,KAAKihB,2BACvDgB,EAAe/F,EAAWxa,QAAQK,SAgBxC,OAfAigB,EAAc7Q,IAAM8Q,EAAa9Q,IACjC6Q,EAAc9Q,KAAO+Q,EAAa/Q,KAClC8Q,EAAc/Q,YAAcgR,EAAahR,YACzC+Q,EAAchgB,GAAKka,EAAWla,GAC9BggB,EAAc/f,SAAWia,EAAWja,SACpC+f,EAAcpgB,KAAOsa,EAAWta,KAChCogB,EAAcF,MAAQ5F,EAAWha,UACjC8f,EAAc5f,OAAS8Z,EAAW9Z,OAC9B8Z,EAAWxa,QAAQ6Z,WACrByG,EAAczG,SAAWW,EAAWxa,QAAQ6Z,UAE1CW,EAAW1a,UAAgD,iBAA7B0a,EAAW1a,SAAS0H,MAAqBgT,EAAW1a,SAAS0H,KAAKlD,QAAQ,QAAU,IACpHgc,EAAcD,GAAK,IAErB1jB,OAAO6H,OAAO8b,EAAcxgB,SAAU0a,EAAW1a,UAC1CwgB,G,GApS8BhK,M,sMCXnClQ,EAAwB,CAC5B5E,WAAY,uCACZ6E,OAAQ,gCACRC,cAAe,CACbC,WAAY,QACZC,OAAQ,GAEVC,gBAAgB,GAGG+Z,E,kCACZ7Z,IAAP,SAAWC,GACLA,GACFjK,OAAO6H,OAAO4B,EAAeQ,I,EAI1B9J,IAAP,WACE,OAAO+J,YAAMT,I,6BCjBjB,IAEqBqa,E,sKAUZC,eAAP,SAAsBlf,EAAoBoJ,EAAY8B,GACpD,IAAMvL,EAA+B,IAAIpB,IACzCoB,EAAQwF,IAAI,eAAgB,oBAC5B,IAAMrE,EAAU,IAAIpB,IAAeC,GACnCmB,EAAQb,QAhBiB,YAiBzBa,EAAQZ,OAAS,iBACjBY,EAAQa,OAAS,OACjBb,EAAQL,IAAMK,EAAQf,OAAOC,GAC7Bc,EAAQqK,IAAM,2BAGd,OADArK,EAAQ0B,OAAS,CAAC4I,QAASF,EAAgB9B,GAAIA,EAAIiC,kBADzB,CAACxC,WAAY,gCAAiCyC,WAAY,QAE7ExK,G,GArB4CkK,K,mOCKlCmU,E,WAenB,WAAY3c,G,YAXK,I,EAWW,e,EAAA,M,sFAC1B1F,KAAKqP,SAAWrP,KAAKsP,cAAc5J,GACnC1F,KAAKyf,SAAW/Z,EAAO4I,QACvBtO,KAAK0f,aAAeha,EAAOgD,Y,mCAX3B,MAAO,Y,2BAuDT4G,cAAA,SAAc5J,GACZ,IAAM8G,EAAS0V,EAAuB1jB,MAChC6Q,EAAkC,GACxCA,EAASpB,KAAKC,IAAoBO,KAAKjC,EAAOtJ,WAAYwC,EAAO4G,GAAI5G,EAAO4I,QAAS5I,EAAOgJ,oBAAqBhJ,EAAOgD,cAExH,IAAM0F,EAA+B,kBAAd1I,EAAO4G,GAAyB,0BAA4B,0BAGnF,OAFA+C,EAASpB,KAAKkU,EAA0BC,eAAe5V,EAAOtJ,WAAYwC,EAAO4G,GAAI8B,IACrFiB,EAASpB,KAAKoL,IAAmB5K,KAAKjC,EAAOtJ,WAAYwC,EAAO4G,GAAI8B,IAC7DiB,G,EAQTK,QAAA,WACE,SAAU1P,KAAKyf,WAAYzf,KAAK0f,e,kCA1DrBrQ,GACXrP,KAAKwP,UAAYH,G,eAIjB,OAAOrP,KAAKwP,Y,6BAGDpL,GACXke,QAAQtb,IAAI5C,GACZ,IAAI6X,EAAmD,IAAI3I,IAA6BlP,EAAS,GAAGrE,MAGpGqE,EAAS,GAAGrE,KAAK2B,QAAU,CACzB,CACEwG,OAAQ,YACR4K,kBAAmB,GAEnBnP,IAAK,kFAAkFsY,EAAmBxI,QAAQ,GAAGzR,GAAlH,0CACH+Q,UAAW,QACXC,UAAW5O,EAAS,GAAGrE,KAAKwV,aAAanE,KAAI,SAAAmR,GAAK,OAAIA,EAAMvgB,MAAIwgB,KAAK,OAKzExiB,KAAKyP,UAAUhH,MAAQwT,EAAmBxI,QAAQ,GAClDzT,KAAKyP,UAAU2M,sBAAwB,IAAIhH,IAAuBhR,EAAS,GAAGrE,MAC9EC,KAAKyP,UAAU6M,mBAAqB,IAAI5E,IAA4BtT,EAAS,GAAGrE,O,eAIhF,OAAOC,KAAKyP,c,wCC1DKgT,E,wLAOnB9S,IAAA,SAAI3L,GAMF,OALAhE,KAAKqP,SAASpB,KAAKjK,GAEnBhE,KAAK0F,OAAO1F,KAAKqP,SAASvB,OAAS,YAAc9J,EAAQb,QACzDnD,KAAK0F,OAAO1F,KAAKqP,SAASvB,OAAS,WAAa9J,EAAQZ,OACxDpD,KAAK0iB,UAAU1iB,KAAKqP,SAASvB,OAAS,IAAK9J,EAAQ0B,QAC5C1F,M,EAGT0iB,UAAA,SAAUC,EAAgBtjB,GACxB,cAAkBhB,OAAOwV,KAAKxU,GAA9B,eAAuC,CAAlC,IAAMH,EAAG,KACe,iBAAhBG,EAAOH,GAChBc,KAAK0iB,UAAUC,EAASzjB,EAAM,IAAKG,EAAOH,IAE1Cc,KAAK0F,OAAOid,EAASzjB,GAAOG,EAAOH,K,EAUzC4Q,QAAA,WAA2B,WACzB,OAAO,IAAIvM,SAAQ,SAACC,EAASC,GAc3B,EAAKJ,gBAAgB6M,MACnB,SAAAnQ,GACE,IAAMoQ,EAAqB,IAAIC,IAAmBrQ,GAC9CoQ,EAAmBE,QACrB7M,EAAQ,CACNX,QAAS,EAAK2B,gBACdJ,SAAU+L,IAGZ1M,EACE,IAAI9D,IAAMA,IAAMiE,SAASxD,SAAUT,IAAMkE,SAASxD,QAASV,IAAMmE,KAAKhD,uBAAwB,CAC5F6C,IAAK,EAAKA,IACVd,QAAS,EAAK2B,gBACd8L,QAASH,EAAmBG,cAKpC,SAAAN,GACEvM,EAAOuM,U,EAMfjM,WAAA,WAAmB,aACbC,EAAU,IAAIC,eAClBD,EAAQE,mBAAqB,WAC3B,GAA2B,IAAvBF,EAAQG,YACa,MAAnBH,EAAQ7B,OACV,IAEEmgB,QAAQpiB,MAAM8D,GACd,IAAMI,EAAWC,KAAKC,MAAMN,EAAQO,cAGpC,OAFA,EAAKC,gBAAkB,EAAKC,oBAAoBT,GAEzC,EAAKN,gBAAgBF,QAAQY,GACpC,MAAOlE,GACP,EAAKwD,gBAAgBD,OACnB,EAAKiB,aAAaV,EAASrE,IAAMmE,KAAKjD,oBAAqB,CACzD8D,KAAMX,EAAQO,kBAQ1B,IAAMZ,EAAM3D,KAAK2D,IAAIiC,MAAM,KAAK,GAuDpC,SAAkBF,GAChB,GAAkC,GAA9BrH,OAAOwV,KAAKnO,GAAQoI,OACtB,MAAO,GAGT,MAAO,IA1BT,SAAkBpI,GAEhB,IADA,IAAI6K,EAAS,GADW,aAEnB,IAAIrR,EAAG,KACV,GAAI6O,MAAMC,QAAQtI,EAAOxG,IAKvB,OAHAwG,EADAxG,GAAO,MACKqG,SAAQ,SAAAqd,GAClBrS,EAAOtC,KAAK4U,mBAAmB3jB,GAAO,IAAM2jB,mBAAmBD,OAEjE,WAEFrS,EAAOtC,KAAK4U,mBAAmB3jB,GAAO,IAAM2jB,mBAAmBnd,EAAOxG,MARxE,MAAgBb,OAAOwV,KAAKnO,GAA5B,eAAqC,IAUrC,OAAO6K,EAAOiS,KAAK,KAcNM,CAASpd,GA5DiBqd,CAAS1kB,OAAO6H,OAAO,CAAC/C,QAASnD,KAAKmD,QAASC,OAAM,SAAEpD,KAAKoD,QAAP,EAAiB,IAAKpD,KAAK0F,SAErH1B,EAAQY,KAAK5E,KAAK6E,OAAQlB,EAAK3D,KAAK8E,YAAYhC,OAC5C9C,KAAK8E,YAAYhC,OAAS9C,KAAK8E,YAAY/B,UAC7CiB,EAAQjB,QAAU/C,KAAK8E,YAAY/B,SAErC,IAAMgC,EAAcC,YAAYC,MAChCjB,EAAQkB,UAAY,WAClB,EAAKC,aAAanB,EAASrE,IAAMmE,KAAKnD,QAAS,CAC7CoC,SAAUiC,YAAYC,MAAQF,GAAe,IAC7CK,WAAYpB,EAAQoB,cAGxBpB,EAAQqB,QAAUrB,EAAQsB,QAAU,WAClC,EAAKH,aAAanB,EAASrE,IAAMmE,KAAKpD,WAAY,CAChDiE,KAAMX,EAAQO,aACda,WAAYpB,EAAQoB,cAGxBpF,KAAK6C,QAAQ0C,SAAQ,SAAC3G,EAAOM,GAC3B8E,EAAQwB,iBAAiBtG,EAAKN,MAGhCoF,EAAQyB,KAAKzF,KAAK0F,S,GArHiCkH,KCDvD,IAEqBT,E,kCAUZC,gBAAP,SAAuBC,EAAuBC,EAAYC,GACxD,IAAMC,EAAS0V,EAAuB1jB,MAChCiO,EAAYD,EAAOxE,cACzB3J,OAAO6H,OAAOuG,EAAW,CAACH,GAAIA,EAAII,UAAW,UAAYL,IACrDE,GACFlO,OAAO6H,OAAOuG,EAAW,CAACF,UAAWA,IAEvC,IAAM1J,EAA+B,IAAIpB,IAInCkL,EAAW,IAAIC,EAAoB/J,GAOzC,OANA8J,EAAS9H,OAAS,MAClB8H,EAASxJ,QAzBgB,eA2BzBwJ,EAAShJ,IAAMgJ,EAAS1J,OAAOuJ,EAAOtJ,WAAWqc,MAAM,eAAiB/S,EAAOtJ,WAAasJ,EAAOtJ,WAAa,cAEhHyJ,EAASjH,OAAS+G,EACXE,G,SCvBUgT,E,oBACnB,WAAYtT,EAAuBE,EAAmBD,EAAiBmF,GAAoD,sBAArEnF,MAAa,KACjE,cAAMmF,IAAN,MACKM,cAAgB5F,EAAWC,gBAAgBC,EAAeC,EAAIC,GAFsD,E,iGAD3EiF,K,ICF7BwR,E,oBAMnB,WAAY/K,EAAgC5L,GAAuB,aACjE,cAAM4L,EAAS5L,IAAf,MACKpM,QAAUqB,YAAU,qBACzB4gB,EAAuB7Z,IAAI4P,EAAQqI,KACnC,EAAKC,wBAAwBtI,EAAQuI,eACrC,EAAK9O,oBAAsBrT,OAAO6H,OAAO,EAAKwL,oBAAqBuG,EAAQwI,wBALV,E,0GAanEhI,eAAA,SAAeC,GAA2E,WASxF,OARIA,EAAUpM,KACZtM,KAAKsM,GAAKoM,EAAUpM,GACpBtM,KAAKqY,cAAe,GAElBrY,KAAKmP,WAAanP,KAAKwY,kBACzBxY,KAAKqY,cAAe,GAEtBrY,KAAK0gB,YAAc,IAAIf,EAAqB3f,KAAKqM,cAAerM,KAAKuM,UAAWvM,KAAKsM,GAAItM,KAAK0R,qBACvF,IAAInO,SAAQ,SAACC,EAASC,GAC3B,IAAM6K,EAAUoK,EAAUpK,QACpB5F,EAAcgQ,EAAUhQ,YAC9B,GAAI4F,GAAW5F,EAAa,CAC1B,IAAI4D,EAAa,EAAKA,GACjBA,IACHA,EAAK,gBACL,EAAKoU,YAAY/Q,IAAIP,IAAkB,CAACD,SAAU,EAAKA,YAEzD,IAAMT,EAAsB,EAAKiS,wBAAwBjI,GAIzD,OAFA,EAAKgI,YAAY/Q,IAAI0S,EAA2B,CAAC/T,UAAShC,KAAIoC,sBAAqBhG,gBAE5E,EAAKgY,YAAYrO,YAAYnC,MAClC,SAAA9L,GACE,IACEZ,EAAQ,EAAKod,uBAAuBxc,IACpC,MAAO4L,GACPvM,EAAOuM,OAGX,SAAAA,GACEvM,EAAOuM,MAIXvM,EAAO,IAAI9D,IAAMA,IAAMiE,SAASxD,SAAUT,IAAMkE,SAAStD,SAAUZ,IAAMmE,KAAK3C,yBAA0B,CAAC+K,QAAS,0B,SAtD3EmU,GCHzC4C,EAAOC,iCACP7c,EAAU8c","file":"playkit-streamamg-provider.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"streamamg\"] = factory();\n\telse\n\t\troot[\"playkit\"] = root[\"playkit\"] || {}, root[\"playkit\"][\"providers\"] = root[\"playkit\"][\"providers\"] || {}, root[\"playkit\"][\"providers\"][\"streamamg\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 33);\n","//@flow\nimport getLogger from '../logger';\nimport {Severity} from './severity';\nimport type {SeverityType} from './severity';\nimport {Code} from './code';\nimport type {CodeType} from './code';\nimport {Category} from './category';\nimport type {CategoryType} from './category';\n\nconst CLASS_NAME: string = 'Error';\n\n/**\n * @classdesc This is a description of the error class.\n */\nexport default class Error {\n  severity: number;\n  category: number;\n  code: number;\n  data: any;\n  /**\n   * @enum {number}\n   */\n  static Severity: SeverityType = Severity;\n  /**\n   * @enum {number}\n   */\n  static Category: CategoryType = Category;\n  /**\n   * @enum {number}\n   */\n  static Code: CodeType = Code;\n  static _logger: any = getLogger(CLASS_NAME);\n\n  /**\n   * @constructor\n   * @param {number} severity - error's severity\n   * @param {number} category - error's category.\n   * @param {number} code - error's code.\n   * @param {any} data - additional data for the error.\n   */\n  constructor(severity: number, category: number, code: number, data: any = {}) {\n    this.severity = severity;\n    this.category = category;\n    this.code = code;\n    this.data = data;\n    Error._logger.error(`Category:${category} | Code:${code} |`, data);\n  }\n}\n","//@flow\n\ntype SeverityType = {[severity: string]: number};\n\nconst Severity: SeverityType = {\n  /**\n   * An error occurred, but the Player is attempting to recover from the error.\n   *\n   * If the Player cannot ultimately recover, it still may not throw a CRITICAL\n   * error.  For example, retrying for a media segment will never result in\n   * a CRITICAL error (the Player will just retry forever).\n   */\n  RECOVERABLE: 1,\n  /**\n   * A critical error that the library cannot recover from.  These usually cause\n   * the Player to stop loading or updating.  A new manifest must be loaded\n   * to reset the library.\n   */\n  CRITICAL: 2\n};\n\nexport {Severity};\nexport type {SeverityType};\n","//@flow\ntype CategoryType = {[category: string]: number};\n\nconst Category: CategoryType = {\n  /** Errors from the network stack. */\n  NETWORK: 1,\n  SERVICE: 2,\n  PROVIDER: 3\n};\n\nexport {Category};\nexport type {CategoryType};\n","//@flow\n\ntype CodeType = {[code: string]: number};\n\nconst Code: CodeType = {\n  /**\n   * A network request was made using an unsupported URI scheme.\n   */\n  UNSUPPORTED_SCHEME: 1000,\n\n  /**\n   * An HTTP network request returned an HTTP status that indicated a failure.\n   */\n  BAD_HTTP_STATUS: 1001,\n\n  /**\n   * An HTTP network request failed with an error, but not from the server.\n   */\n  HTTP_ERROR: 1002,\n\n  /**\n   * A network request timed out.\n   */\n  TIMEOUT: 1003,\n\n  /**\n   * A network request was made with a malformed data URI.\n   */\n  MALFORMED_DATA_URI: 1004,\n\n  /**\n   * The server responsded with 2xx response, but it couldn't be parsed\n   */\n  BAD_SERVER_RESPONSE: 1005,\n\n  /**\n   * The server response had a valid structure but contained an error from the API\n   */\n  MULTIREQUEST_API_ERROR: 1006,\n\n  /**\n   * The server response had a valid structure and valid API result, but it did not match the request\n   */\n  API_RESPONSE_MISMATCH: 1007,\n\n  /**\n   * The server responded with an error\n   */\n  ERROR: 2000,\n\n  /**\n   * The server responded with a block action\n   */\n  BLOCK_ACTION: 2001,\n\n  /**\n   * The server responded with status import or pre convert\n   */\n  MEDIA_STATUS_NOT_READY: 2002,\n\n  /**\n   * The provider is missing mandatory parameter/s\n   */\n\n  MISSING_MANDATORY_PARAMS: 3000,\n\n  /**\n   * The server responded with empty sources objects (for HLS, Dash and progressive)\n   */\n  MISSING_PLAY_SOURCE: 3001,\n\n  /**\n   * The provider doesn't implement the called api\n   */\n  METHOD_NOT_IMPLEMENTED: 3002\n};\n\nexport {Code};\nexport type {CodeType};\n","//@flow\nimport MediaSources from './media-sources';\n\nexport default class MediaEntry {\n  static Type: {[type: string]: string} = {\n    VOD: 'Vod',\n    LIVE: 'Live',\n    IMAGE: 'Image',\n    AUDIO: 'Audio',\n    UNKNOWN: 'Unknown'\n  };\n  static DvrStatus: {[type: string]: number} = {\n    ON: 1,\n    OFF: 0\n  };\n\n  /**\n   * @member - entry id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - entry name\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - entry sources\n   * @type {MediaSources}\n   */\n  sources: MediaSources;\n  /**\n   * @member - entry duration\n   * @type {number}\n   */\n  duration: number;\n  /**\n   * @member - entry type\n   * @type {string}\n   */\n  type: string;\n  /**\n   * @member - entry metadata\n   * @type {Object}\n   */\n  metadata: Object;\n  /**\n   * @member - DVR status\n   * @type {number}\n   */\n  dvrStatus: number;\n  /**\n   * @member - media status\n   * @type {number}\n   */\n  status: number;\n  /**\n   * @member - media poster\n   * @type {string | Array<Object>}\n   */\n  poster: string | Array<Object>;\n\n  /**\n   * @member - assetReferenceType\n   * @type {string }\n   */\n  assetReferenceType: string;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.metadata = new Map();\n    this.sources = new MediaSources();\n    this.type = MediaEntry.Type.UNKNOWN;\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaEntryObject} - The json class object.\n   */\n  toJSON(): ProviderMediaEntryObject {\n    return {\n      id: this.id,\n      name: this.name,\n      sources: this.sources.toJSON(),\n      duration: this.duration,\n      dvrStatus: this.dvrStatus,\n      status: this.status,\n      metadata: this.metadata,\n      type: this.type,\n      poster: this.poster,\n      assetReferenceType: this.assetReferenceType\n    };\n  }\n}\n","//@flow\nimport Error from './error/error';\n\nconst KALTURA_HEADER_PREFIX: string = 'x-';\n\nexport default class RequestBuilder {\n  /**\n   * @member - Service name\n   * @type {string}\n   */\n  service: string;\n  /**\n   * @member - Service action\n   * @type {string}\n   */\n  action: string;\n  /**\n   * @member - Service params\n   * @type {any}\n   */\n  params: any;\n  /**\n   * @memberof - Service headers\n   * @type {Map<string, string>}\n   */\n  headers: Map<string, string>;\n  /**\n   * @memberof - Service URL\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @memberof - Service method (POST,GET,DELETE etc..)\n   * @type {string}\n   */\n  method: string;\n  /**\n   * @memberof - Service tag\n   * @type {string}\n   */\n  tag: string;\n  /**\n   * @memberof - the response headers of the arra\n   * @type {Array<string>}\n   */\n  responseHeaders: Array<string>;\n  /**\n   * @description network retry configuration\n   * @memberof RequestBuilder\n   * @type {ProviderNetworkRetryParameters}\n   */\n  retryConfig: ProviderNetworkRetryParameters = {\n    async: true,\n    timeout: 0,\n    maxAttempts: 4\n  };\n\n  /**\n   * @description number of xhr attempts for the same multi - request.\n   * @memberof RequestBuilder\n   * @type {number}\n   * @private\n   */\n  _attemptCounter: number = 1;\n\n  /**\n   * @description hold the promise result of the XHR request(s) - if all tries fails, it rejects with the error.\n   * @memberof RequestBuilder\n   * @type {Object}\n   * @private\n   */\n  _requestPromise: Object;\n\n  /**\n   * @constructor\n   * @param {Map<string, string>} headers The request headers\n   */\n  constructor(headers: Map<string, string> = new Map()) {\n    this.headers = headers;\n  }\n\n  /**\n   * Builds restful service URL\n   * @function getUrl\n   * @param {string} serviceUrl - The service base URL\n   * @returns {string} The service URL\n   */\n  getUrl(serviceUrl: string): string {\n    return serviceUrl + '/service/' + this.service + (this.action ? '/action/' + this.action : '');\n  }\n\n  /**\n   * Executes service\n   * @function doHttpRequest\n   * @returns {Promise.<any>} Service response as promise\n   */\n  doHttpRequest(): Promise<any> {\n    const promise = new Promise((resolve, reject) => {\n      this._requestPromise = {\n        resolve,\n        reject\n      };\n    });\n    if (!this.url) {\n      this._requestPromise.reject(\n        new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.MALFORMED_DATA_URI, {\n          url: this.url\n        })\n      );\n    }\n    this._createXHR();\n    return promise;\n  }\n\n  _createXHR(): void {\n    let request = new XMLHttpRequest();\n    request.onreadystatechange = () => {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          try {\n            const response = JSON.parse(request.responseText);\n            this.responseHeaders = this._getResponseHeaders(request);\n            // the promise returns the response for backwards compatibility\n            return this._requestPromise.resolve(response);\n          } catch (error) {\n            this._requestPromise.reject(\n              this._createError(request, Error.Code.BAD_SERVER_RESPONSE, {\n                text: request.responseText\n              })\n            );\n          }\n        }\n      }\n    };\n    request.open(this.method, this.url, this.retryConfig.async);\n    if (this.retryConfig.async && this.retryConfig.timeout) {\n      request.timeout = this.retryConfig.timeout;\n    }\n    const requestTime = performance.now();\n    request.ontimeout = () => {\n      this._handleError(request, Error.Code.TIMEOUT, {\n        timeout: (performance.now() - requestTime) / 1000,\n        statusText: request.statusText\n      });\n    };\n    request.onerror = request.onabort = () => {\n      this._handleError(request, Error.Code.HTTP_ERROR, {\n        text: request.responseText,\n        statusText: request.statusText\n      });\n    };\n    this.headers.forEach((value, key) => {\n      request.setRequestHeader(key, value);\n    });\n    request.send(this.params);\n  }\n\n  _getResponseHeaders(request: XMLHttpRequest): Array<string> {\n    return request\n      .getAllResponseHeaders()\n      .split('\\n')\n      .filter(header => header.toLowerCase().indexOf(KALTURA_HEADER_PREFIX) === 0);\n  }\n\n  _handleError(request: XMLHttpRequest, code: number, data: Object): Promise<*> | void {\n    const error = this._createError(request, code, data);\n    request.onreadystatechange = function () {};\n    request.onerror = function () {};\n    request.ontimeout = function () {};\n    request.onabort = function () {};\n    if (this.retryConfig.maxAttempts && this._attemptCounter < this.retryConfig.maxAttempts) {\n      this._attemptCounter++;\n      this._createXHR();\n    } else {\n      return this._requestPromise.reject(error);\n    }\n  }\n\n  _createError(request: XMLHttpRequest, code: number, data: Object): Error {\n    Object.assign(data, {\n      url: this.url,\n      headers: this._getResponseHeaders(request),\n      attempt: this._attemptCounter\n    });\n    return new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, code, data);\n  }\n}\n","//@flow\nexport type LogLevelObject = {value: number, name: string};\nexport type LogLevelType = {[level: string]: LogLevelObject};\nexport type loggerFunctionType = {\n  VERSION: String,\n  DEBUG: LogLevelObject,\n  ERROR: LogLevelObject,\n  INFO: LogLevelObject,\n  OFF: LogLevelObject,\n  TIME: LogLevelObject,\n  TRACE: LogLevelObject,\n  WARN: LogLevelObject,\n  createDefaultHandler: Function,\n  debug: Function,\n  enabledFor: Function,\n  error: Function,\n  get: Function,\n  getLevel: Function,\n  info: Function,\n  log: Function,\n  setHandler: Function,\n  setLevel: Function,\n  time: Function,\n  timeEnd: Function,\n  trace: Function,\n  useDefaults: Function,\n  warn: Function\n};\n\nexport type LoggerType = {\n  getLogger: loggerFunctionType,\n  LogLevel: LogLevelType\n};\n\nlet JsLogger = {\n  get: () => ({\n    VERSION: '',\n    DEBUG: {value: '', name: ''},\n    ERROR: {value: '', name: ''},\n    INFO: {value: '', name: ''},\n    OFF: {value: '', name: ''},\n    TIME: {value: '', name: ''},\n    TRACE: {value: '', name: ''},\n    WARN: {value: '', name: ''},\n    createDefaultHandler: () => {},\n    debug: () => {},\n    enabledFor: () => {},\n    error: () => {},\n    get: () => {},\n    getLevel: () => {},\n    info: () => {},\n    log: () => {},\n    setHandler: () => {},\n    setLevel: () => {},\n    time: () => {},\n    timeEnd: () => {},\n    trace: () => {},\n    useDefaults: () => {},\n    warn: () => {}\n  })\n};\n\nlet LogLevel: LogLevelType = {};\n/**\n * set logger\n * @param {LoggerType} logger - the logger\n * @returns {void}\n */\nfunction setLogger(logger: ?LoggerType): void {\n  if (logger && typeof logger.getLogger === 'function') {\n    JsLogger.get = logger.getLogger;\n  }\n  if (logger && logger.LogLevel) {\n    LogLevel = logger.LogLevel;\n  }\n}\n\n/**\n * get a logger\n * @param {?string} name - the logger name\n * @returns {Object} - the logger class\n */\nfunction getLogger(name?: string): Object {\n  //$FlowFixMe\n  return JsLogger.get(name);\n}\n\n/**\n * get the log level\n * @param {?string} name - the logger name\n * @returns {LogLevelObject} - the log level\n */\nfunction getLogLevel(name?: string): LogLevelObject {\n  return getLogger(name).getLevel();\n}\n\n/**\n * sets the logger level\n * @param {LogLevelObject} level - the log level\n * @param {?string} name - the logger name\n * @returns {void}\n */\nfunction setLogLevel(level: LogLevelObject, name?: string): void {\n  getLogger(name).setLevel(level);\n}\n\nexport default getLogger;\nexport {getLogLevel, setLogLevel, setLogger, LogLevel};\n","//@flow\nimport {clone} from '../../util/clone';\n\nconst defaultConfig: Object = {\n  serviceUrl: 'https://cdnapisec.kaltura.com/api_v3',\n  cdnUrl: 'https://cdnapisec.kaltura.com',\n  serviceParams: {\n    apiVersion: '3.3.0',\n    format: 1\n  },\n  useApiCaptions: true\n};\n\nexport default class OVPConfiguration {\n  static set(clientConfig?: ProviderEnvConfigObject) {\n    if (clientConfig) {\n      Object.assign(defaultConfig, clientConfig);\n    }\n  }\n\n  static get(): Object {\n    return clone(defaultConfig);\n  }\n}\n\nexport {OVPConfiguration};\n","//@flow\nexport default class KalturaMediaEntry {\n  static EntryType: {[entryType: string]: {value: number | string}} = {\n    AUTOMATIC: {value: -1},\n    EXTERNAL_MEDIA: {value: 'externalMedia.externalMedia'},\n    MEDIA_CLIP: {value: 1},\n    MIX: {value: 2},\n    PLAYLIST: {value: 5},\n    DATA: {value: 6},\n    LIVE_STREAM: {value: 7},\n    LIVE_CHANNEL: {value: 8},\n    DOCUMENT: {value: 10}\n  };\n\n  static MediaType: {[mediaType: string]: {value: number}} = {\n    VIDEO: {value: 1},\n    IMAGE: {value: 2},\n    AUDIO: {value: 5},\n    LIVE_STREAM_FLASH: {value: 201},\n    LIVE_STREAM_WINDOWS_MEDIA: {value: 202},\n    LIVE_STREAM_REAL_MEDIA: {value: 203},\n    LIVE_STREAM_QUICK_TIME: {value: 204}\n  };\n\n  static EntryStatus: {[status: string]: string | number} = {\n    ERROR_IMPORTING: -2,\n    ERROR_CONVERTING: -1,\n    SCAN_FAILURE: 'virusScan.ScanFailure',\n    IMPORT: 0,\n    INFECTED: 'virusScan.Infected',\n    PRECONVERT: 1,\n    READY: 2,\n    DELETED: 3,\n    PENDING: 4,\n    MODERATE: 5,\n    BLOCKED: 6,\n    NO_CONTENT: 7\n  };\n\n  static EntryModerationStatus: {[status: string]: number} = {\n    PENDING_MODERATION: 1,\n    APPROVED: 2,\n    REJECTED: 3,\n    FLAGGED_FOR_REVIEW: 4,\n    MODERATE: 5,\n    AUTO_APPROVED: 6\n  };\n\n  /**\n   * @member - The entry id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - The entry referenceId\n   * @type {string}\n   */\n  referenceId: string;\n  /**\n   * @member - The entry externalSourceType\n   * @type {string}\n   */\n  externalSourceType: string;\n  /**\n   * @member - Entry name (Min 1 chars)\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - Entry description\n   * @type {string}\n   */\n  description: string;\n  /**\n   * @member - The URL used for playback. This is not the download URL.\n   * @type {string}\n   */\n  dataUrl: string;\n  /**\n   * @member - Comma separated flavor params ids that exists for this media entry\n   * @type {string}\n   */\n  flavorParamsIds: string;\n  /**\n   * @member - The entry duration\n   * @type {number}\n   */\n  duration: number;\n  /**\n   * @member - The type of the entry, this is auto filled by the derived entry object\n   * @type {string | number}\n   */\n  type: string | number;\n  /**\n   * @member - The type of the entry, this is auto filled by the derived entry object (Image, Audio etc.)\n   * @type {number}\n   */\n  entryType: number;\n  /**\n   * @member - Entry poster image\n   * @type {string}\n   */\n  poster: string;\n  /**\n   * @member - DVR status\n   * @type {number}\n   */\n  dvrStatus: number;\n  /**\n   * @member - Entry tags\n   * @type {string}\n   */\n  tags: string;\n\n  /**\n   * @member - Entry status\n   * @type {number}\n   */\n  status: number;\n\n  /**\n   * @constructor\n   * @param {Object} entry The json response\n   */\n  constructor(entry: Object) {\n    this.id = entry.id;\n    this.referenceId = entry.referenceId;\n    this.externalSourceType = entry.externalSourceType;\n    this.name = entry.name;\n    this.description = entry.description;\n    this.dataUrl = entry.dataUrl;\n    this.type = entry.type;\n    this.entryType = entry.mediaType;\n    this.flavorParamsIds = entry.flavorParamsIds;\n    this.duration = entry.duration;\n    this.poster = entry.thumbnailUrl;\n    this.status = entry.status;\n    this.dvrStatus = entry.dvrStatus;\n    this.tags = entry.tags;\n  }\n}\n","//@flow\nexport const MediaFormat: {[name: string]: ProviderMediaFormatType} = {\n  DASH: {\n    name: 'dash',\n    mimeType: 'application/dash+xml',\n    pathExt: 'mpd'\n  },\n  HLS: {\n    name: 'hls',\n    mimeType: 'application/x-mpegURL',\n    pathExt: 'm3u8'\n  },\n  WVM: {\n    name: 'wvm',\n    mimeType: 'video/wvm',\n    pathExt: 'wvm'\n  },\n  MP4: {\n    name: 'mp4',\n    mimeType: 'video/mp4',\n    pathExt: 'mp4'\n  },\n  MP3: {\n    name: 'mp3',\n    mimeType: 'audio/mpeg',\n    pathExt: 'mp3'\n  }\n};\n\nexport const SupportedStreamFormat: Map<string, ProviderMediaFormatType> = new Map([\n  ['mpegdash', MediaFormat.DASH],\n  ['applehttp', MediaFormat.HLS],\n  ['url', MediaFormat.MP4]\n]);\n\n/**\n * returns a boolean whether a source is progressive or not\n * @param {string} formatName - the format name\n * @returns {boolean} - if source is progressive or not\n */\nfunction isProgressiveSource(formatName: string): boolean {\n  const sourceFormat = SupportedStreamFormat.get(formatName);\n  return !!sourceFormat && sourceFormat.name === MediaFormat.MP4.name;\n}\n\nexport {isProgressiveSource};\n","//@flow\nexport default class ServiceResult {\n  /**\n   * @member - Is service returned an error\n   * @type {boolean}\n   */\n  hasError: boolean = false;\n  /**\n   * @member - The service error\n   * @type {ServiceError}\n   */\n  error: ServiceError;\n  /**\n   * @member - The service result data\n   * @type {Object}\n   */\n  data: Object;\n\n  /**\n   * @constructor\n   * @param {Object} response - Service response\n   */\n  constructor(response: Object) {\n    if (response.objectType === 'KalturaAPIException') {\n      this.hasError = true;\n      this.error = new ServiceError(response.code, response.message);\n    } else if (response.error && response.error.objectType === 'KalturaAPIException') {\n      this.hasError = true;\n      this.error = new ServiceError(response.error.code, response.error.message);\n    } else {\n      this.data = response;\n    }\n  }\n}\n\nclass ServiceError {\n  /**\n   * @member - The error code\n   * @type {string}\n   */\n  code: string;\n  /**\n   * @member - The error message\n   * @type {string}\n   */\n  message: string;\n\n  /**\n   * @constructor\n   * @param {string} code - The result code\n   * @param {string} message - The result message\n   */\n  constructor(code: string, message: string) {\n    this.code = code;\n    this.message = message;\n  }\n}\n","//@flow\nimport MultiRequestBuilder from '../../common/multi-request-builder';\nimport OVPConfiguration from '../config';\n\nconst SERVICE_NAME: string = 'multirequest';\n\nexport default class OVPService {\n  /**\n   * Gets a new instance of MultiRequestBuilder with ovp params\n   * @function getMultiRequest\n   * @param {string} playerVersion The player version\n   * @param {string} ks The ks\n   * @param {string} partnerId The partner ID\n   * @returns {MultiRequestBuilder} The multi request builder\n   * @static\n   */\n  static getMultiRequest(playerVersion: string, ks: string, partnerId?: number): MultiRequestBuilder {\n    const config = OVPConfiguration.get();\n    const ovpParams = config.serviceParams;\n    Object.assign(ovpParams, {ks: ks, clientTag: 'html5:v' + playerVersion});\n    if (partnerId) {\n      Object.assign(ovpParams, {partnerId: partnerId});\n    }\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const multiReq = new MultiRequestBuilder(headers);\n    multiReq.method = 'POST';\n    multiReq.service = SERVICE_NAME;\n    multiReq.url = multiReq.getUrl(config.serviceUrl);\n    multiReq.params = ovpParams;\n    return multiReq;\n  }\n}\n","//@flow\nexport default class KalturaRuleAction {\n  static Type: {[type: string]: string | number} = {\n    DRM_POLICY: 'drm.DRM_POLICY',\n    BLOCK: 1,\n    PREVIEW: 2,\n    LIMIT_FLAVORS: 3,\n    ADD_TO_STORAGE: 4,\n    LIMIT_DELIVERY_PROFILES: 5,\n    SERVE_FROM_REMOTE_SERVER: 6,\n    REQUEST_HOST_REGEX: 7,\n    LIMIT_THUMBNAIL_CAPTURE: 8\n  };\n\n  /**\n   * @member - The type of the action\n   * @type {string|number}\n   */\n  type: string | number;\n\n  /**\n   * @constructor\n   * @param {Object} data - The response\n   */\n  constructor(data: Object) {\n    this.type = data.type;\n  }\n}\n","//@flow\nimport Drm from './drm';\n\nexport default class MediaSource {\n  /**\n   * @member - media source id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - media source url\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @member - media source mimetype\n   * @type {string}\n   */\n  mimetype: string;\n  /**\n   * @member - media source drm data\n   * @type {Array<Drm>}\n   */\n  drmData: Array<Drm>;\n  /**\n   * @member - media source bandwidth\n   * @type {number}\n   */\n  bandwidth: number;\n  /**\n   * @member - media source width\n   * @type {number}\n   */\n  width: number;\n  /**\n   * @member - media source height\n   * @type {number}\n   */\n  height: number;\n  /**\n   * @member - media source label\n   * @type {string}\n   */\n  label: string;\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaSourceObject} - The json class object.\n   */\n  toJSON(): ProviderMediaSourceObject {\n    const response: ProviderMediaSourceObject = {\n      id: this.id,\n      url: this.url,\n      mimetype: this.mimetype\n    };\n    if (this.bandwidth) response.bandwidth = this.bandwidth;\n    if (this.width) response.width = this.width;\n    if (this.height) response.height = this.height;\n    if (this.label) response.label = this.label;\n    if (this.drmData && this.drmData.length > 0) {\n      response.drmData = [];\n      this.drmData.forEach(d => {\n        if (Array.isArray(response.drmData)) {\n          response.drmData.push(d.toJSON());\n        }\n      });\n    }\n    return response;\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\nimport BaseEntryResponseProfile from '../request-params/base-entry-response-profile';\n\nconst SERVICE_NAME: string = 'baseEntry';\n\nexport default class OVPBaseEntryService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for baseentry.getPlaybackContext\n   * @function getPlaybackContext\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The ks\n   * @param {serviceEntryId} serviceEntryId The entry id from the request result (to support loading by referenceId)\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static getPlaybackContext(serviceUrl: string, ks: string, serviceEntryId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'getPlaybackContext';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'baseEntry-getPlaybackContext';\n    const contextDataParams = {objectType: 'KalturaContextDataParams', flavorTags: 'all'};\n    request.params = {entryId: serviceEntryId, ks: ks, contextDataParams: contextDataParams};\n    return request;\n  }\n\n  /**\n   * Creates an instance of RequestBuilder for baseentry.list\n   * @function list\n   * @param {string} serviceUrl The base URL\n   * @param {string} ks The ks\n   * @param {string} entryId The entry ID\n   * @param {boolean} redirectFromEntryId whether the live entry should continue and play the VOD one after the live stream ends.\n   * @param {string} referenceId a Reference id instead of an entry id\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static list(serviceUrl: string, ks: string, entryId: string, redirectFromEntryId: boolean, referenceId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'list';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'list';\n    request.params = OVPBaseEntryService.getEntryListReqParams(entryId, ks, redirectFromEntryId, referenceId);\n    return request;\n  }\n\n  /**\n   * Gets  baseentry.list service params\n   * @function getEntryListReqParams\n   * @param {string} entryId The entry ID\n   * @param {string} ks The ks\n   * @param {boolean} redirectFromEntryId whether the live entry should continue and play the VOD one after the live stream ends.\n   * @param {string} referenceId a Reference id instead of an entry id\n   * @returns {{ks: string, filter: {redirectFromEntryId: string}, responseProfile: {fields: string, type: number}}} The service params object\n   * @static\n   */\n  static getEntryListReqParams(entryId: string, ks: string, redirectFromEntryId: boolean, referenceId: string): any {\n    let filterParams = {};\n    if (entryId) {\n      filterParams = redirectFromEntryId ? {redirectFromEntryId: entryId} : {idEqual: entryId};\n    } else if (referenceId) {\n      filterParams = {objectType: 'KalturaBaseEntryFilter', referenceIdEqual: referenceId};\n    }\n\n    return {ks: ks, filter: filterParams, responseProfile: new BaseEntryResponseProfile()};\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\n\nconst SERVICE_NAME: string = 'session';\n\nexport default class OVPSessionService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for session.startWidgetSession\n   * @function anonymousSession\n   * @param {string} serviceUrl The service base URL\n   * @param {string} widgetId The widget ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static anonymousSession(serviceUrl: string, widgetId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'startWidgetSession';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'session-startWidget';\n    request.params = {widgetId};\n    return request;\n  }\n}\n","//@flow\nimport OVPSessionService from '../services/session-service';\nimport OVPConfiguration from '../config';\nimport RequestBuilder from '../../../util/request-builder';\n\nexport default class OVPSessionLoader implements ILoader {\n  _widgetId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'session';\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    this._response.ks = response[0].data.ks;\n  }\n\n  get response(): any {\n    return this._response.ks;\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._widgetId = params.widgetId;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OVPSessionService.anonymousSession(config.serviceUrl, params.widgetId));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._widgetId;\n  }\n}\n","//@flow\nimport RequestBuilder from '../../util/request-builder';\nimport getLogger from '../../util/logger';\nimport ServiceResult from './base-service-result';\nimport Error from '../../util/error/error';\n\nexport default class MultiRequestBuilder extends RequestBuilder {\n  static _logger = getLogger('MultiRequestBuilder');\n  /**\n   * @memberof - MultiRequestBuilder\n   * @type {Array<RequestBuilder>}\n   */\n  requests: Array<RequestBuilder> = [];\n  /**\n   * Adds request to requests array\n   * @function add\n   * @param {RequestBuilder} request The request\n   * @returns {MultiRequestBuilder} The multiRequest\n   */\n  add(request: RequestBuilder): MultiRequestBuilder {\n    this.requests.push(request);\n    const requestParams = {};\n    const serviceDef: Object = {service: request.service, action: request.action};\n    Object.assign(requestParams, {[this.requests.length]: Object.assign(serviceDef, request.params)});\n    Object.assign(requestParams, this.params);\n    this.params = requestParams;\n    return this;\n  }\n\n  /**\n   * Executes a multi request\n   * @function execute\n   * @returns {Promise} The multirequest execution promise\n   */\n  execute(): Promise<Object> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.params = JSON.stringify(this.params);\n      } catch (err) {\n        MultiRequestBuilder._logger.error(`${err.message}`);\n        reject(\n          new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.FAILED_PARSING_REQUEST, {\n            error: err,\n            params: this.params\n          })\n        );\n      }\n      this.doHttpRequest().then(\n        data => {\n          const multiRequestResult = new MultiRequestResult(data);\n          if (multiRequestResult.success) {\n            resolve({\n              headers: this.responseHeaders,\n              response: multiRequestResult\n            });\n          } else {\n            reject(\n              new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.MULTIREQUEST_API_ERROR, {\n                url: this.url,\n                headers: this.responseHeaders,\n                results: multiRequestResult.results\n              })\n            );\n          }\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n  }\n}\n\nexport class MultiRequestResult {\n  static _logger = getLogger('MultiRequestResult');\n  /**\n   * @memberof MultiRequestResult\n   * @type {boolean}\n   */\n  success: boolean;\n  /**\n   * @memberof MultiRequestResult\n   * @type {Object}\n   */\n  results: Array<ServiceResult> = [];\n  /**\n   * @constructor\n   * @param {Object} response data\n   */\n  constructor(response: Object) {\n    this.success = true;\n    const responseArr = response.result ? response.result : response;\n    responseArr.forEach(result => {\n      const serviceResult: ServiceResult = new ServiceResult(result);\n      this.results.push(serviceResult);\n      if (serviceResult.hasError) {\n        MultiRequestResult._logger.error(\n          `Service returned an error with error code: ${serviceResult.error.code} and message: ${serviceResult.error.message}.`\n        );\n        this.success = false;\n        return;\n      }\n    });\n  }\n}\n","//@flow\nexport default class KalturaDrmPlaybackPluginData {\n  static Scheme: {[scheme: string]: string} = {\n    'drm.PLAYREADY_CENC': 'com.microsoft.playready',\n    'drm.WIDEVINE_CENC': 'com.widevine.alpha',\n    'fairplay.FAIRPLAY': 'com.apple.fairplay',\n    WIDEVINE_CENC: 'com.widevine.alpha',\n    PLAYREADY_CENC: 'com.microsoft.playready',\n    FAIRPLAY: 'com.apple.fairplay'\n  };\n\n  /**\n   * @member - The drm scheme\n   * @type {string}\n   */\n  scheme: string;\n\n  /**\n   * @member - The license URL\n   * @type {string}\n   */\n  licenseURL: string;\n\n  /**\n   * @member - The drm certificate\n   * @type {?string}\n   */\n  certificate: ?string;\n\n  /**\n   * @constructor\n   * @param {Object} drm The json response\n   */\n  constructor(drm: any) {\n    this.scheme = drm.scheme;\n    this.licenseURL = drm.licenseURL;\n    this.certificate = drm.certificate;\n  }\n}\n","// @flow\nimport MediaSource from './media-source';\nimport {MediaFormat} from './media-format';\n\nexport default class MediaSources {\n  /**\n   * Progressive download media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  progressive: Array<MediaSource>;\n  /**\n   * Dash media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  dash: Array<MediaSource>;\n  /**\n   * Hls media sources container.\n   * @type {Array<MediaSource>}\n   * @public\n   */\n  hls: Array<MediaSource>;\n  captions: Array<PKExternalCaptionObject>;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.progressive = [];\n    this.dash = [];\n    this.hls = [];\n  }\n\n  /**\n   * Maps the source to one of the containers according to his media format.\n   * @param {MediaSource} source - The source to add to one of the containers.\n   * @param {MediaFormat} mediaFormat - The media format of the source.\n   * @returns {void}\n   */\n  map(source: MediaSource, mediaFormat: ?ProviderMediaFormatType) {\n    if (mediaFormat) {\n      switch (mediaFormat.name) {\n        case MediaFormat.MP4.name:\n          this.progressive.push(source);\n          break;\n        case MediaFormat.DASH.name:\n          this.dash.push(source);\n          break;\n        case MediaFormat.HLS.name:\n          this.hls.push(source);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderMediaSourcesObject} - The json class object.\n   */\n  toJSON(): ProviderMediaSourcesObject {\n    const response: ProviderMediaSourcesObject = {\n      progressive: [],\n      dash: [],\n      hls: []\n    };\n    this.progressive.forEach(p => response.progressive.push(p.toJSON()));\n    this.hls.forEach(h => response.hls.push(h.toJSON()));\n    this.dash.forEach(d => response.dash.push(d.toJSON()));\n    return response;\n  }\n}\n","// @flow\nimport MultiRequestBuilder, {MultiRequestResult} from './multi-request-builder';\nimport Error from '../../util/error/error';\n\nexport default class DataLoaderManager {\n  /**\n   * @member - Loaders response map index\n   * @type {Map<string,Array<number>>}\n   * @private\n   */\n  _loadersResponseMap: Map<string, Array<number>> = new Map();\n  /**\n   * @member - Loaders multi request\n   * @type {MultiRequestBuilder}\n   * @protected\n   */\n  _multiRequest: MultiRequestBuilder;\n  /**\n   * @member - Loaders multi response\n   * @type {MultiRequestResult}\n   * @private\n   */\n  _multiResponse: MultiRequestResult;\n  /**\n   * @member - Loaders to execute\n   * @type {Map<string,Function>}\n   * @private\n   */\n  _loaders: Map<string, ILoader> = new Map();\n\n  _networkRetryConfig: ProviderNetworkRetryParameters;\n\n  constructor(networkRetryConfig: ProviderNetworkRetryParameters) {\n    this._networkRetryConfig = networkRetryConfig;\n  }\n\n  /**\n   * Add loader to execution loaders map\n   * @function\n   * @param {Function} loader Loader to add\n   * @param {Object} params Loader params\n   * @returns {void}\n   */\n  add(loader: Function, params: Object): void {\n    let execution_loader = new loader(params);\n    if (execution_loader.isValid()) {\n      this._loaders.set(loader.id, execution_loader);\n      // Get the start index from the multiReqeust before adding current execution_loader requests\n      let startIndex = this._multiRequest.requests.length;\n      // Get the requests\n      let requests = execution_loader.requests;\n      this._multiRequest.retryConfig = this._networkRetryConfig;\n      // Add requests to muktiRequest queue\n      requests.forEach(request => {\n        this._multiRequest.add(request);\n      });\n      // Create range array of current execution_loader requests\n      let executionLoaderResponseMap = Array.from(new Array(requests.length), (val, index) => index + startIndex);\n      // Add to map\n      this._loadersResponseMap.set(loader.id, executionLoaderResponseMap);\n    }\n  }\n\n  /**\n   * Get data from all loaders using multi request\n   * @function\n   * @returns {Promise} Promise\n   */\n  fetchData(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this._multiRequest.execute().then(\n        data => {\n          this._multiResponse = data.response;\n          let preparedData: Object = this.prepareData(data.response);\n          if (preparedData.success) {\n            resolve(this._loaders);\n          } else {\n            reject(\n              new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.API_RESPONSE_MISMATCH, {\n                headers: data.headers\n              })\n            );\n          }\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n  }\n\n  /**\n   * Prepare fetched data\n   * @function\n   * @param {MultiRequestResult} response - The multi request result\n   * @returns {Object} - The prepared data\n   */\n  prepareData(response: MultiRequestResult): Object {\n    this._loaders.forEach((loader, name) => {\n      let loaderDataIndexes = this._loadersResponseMap.get(name);\n      try {\n        if (loaderDataIndexes && loaderDataIndexes.length > 0) {\n          loader.response = response.results.slice(loaderDataIndexes[0], loaderDataIndexes[loaderDataIndexes.length - 1] + 1);\n        }\n      } catch (err) {\n        return {success: false, error: err};\n      }\n    });\n    return {success: true, data: this._loaders};\n  }\n}\n","//@flow\nexport default class KalturaAccessControlMessage {\n  /**\n   * @member - The access control message\n   * @type {string}\n   */\n  message: string;\n  /**\n   *  @member - The access control message code\n   * @@type {string}\n   */\n  code: string;\n\n  /**\n   * @constructor\n   * @param {Object} data The json response\n   */\n  constructor(data: Object) {\n    this.message = data.message;\n    this.code = data.code;\n  }\n}\n","//@flow\nexport default class Drm {\n  /**\n   * @member - license url\n   * @type {string}\n   */\n  licenseUrl: string;\n  /**\n   * @member - drm scheme\n   * @type {string}\n   */\n  scheme: string;\n\n  /**\n   * @member - drm certificate\n   * @type {string}\n   */\n  certificate: string;\n\n  /**\n   * @constructor\n   * @param {string} licenseUrl - the license url\n   * @param {string} scheme - the drm scheme\n   * @param {?string} certificate - the drm certificate\n   */\n  constructor(licenseUrl: string, scheme: string, certificate: ?string) {\n    this.licenseUrl = licenseUrl;\n    this.scheme = scheme;\n    if (certificate) {\n      this.certificate = certificate;\n    }\n  }\n\n  /**\n   * Convert class to native js object.\n   * @returns {ProviderDrmDataObject} - The json class object.\n   */\n  toJSON(): ProviderDrmDataObject {\n    const response: ProviderDrmDataObject = {\n      licenseUrl: this.licenseUrl,\n      scheme: this.scheme\n    };\n    if (this.certificate) response.certificate = this.certificate;\n    return response;\n  }\n}\n","//@flow\nimport KalturaDrmPlaybackPluginData from '../../common/response-types/kaltura-drm-playback-plugin-data';\n\nexport type OVPKalturaPlaybackSource = KalturaPlaybackSource;\n\nexport default class KalturaPlaybackSource {\n  /**\n   * @member - source format according to delivery profile streamer type (applehttp, mpegdash etc.)\n   * @type {string}\n   */\n  format: string;\n  /**\n   * @member - delivery profile Id\n   * @type {string}\n   */\n  deliveryProfileId: string;\n  /**\n   * @member - The source URL\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @member - comma separated string according to deliveryProfile media protocols ('http,https' etc.)\n   * @type {string}\n   */\n  protocols: string;\n  /**\n   * @member - comma separated string of flavor ids\n   * @type {string}\n   */\n  flavorIds: string;\n  /**\n   * @member - drm data object containing relevant license url ,scheme name and certificate\n   * @type {Array<KalturaDrmPlaybackPluginData>}\n   */\n  drm: Array<KalturaDrmPlaybackPluginData> = [];\n\n  /**\n   * @constructor\n   * @param {Object} source The response\n   */\n  constructor(source: Object) {\n    this.format = source.format;\n    this.deliveryProfileId = source.deliveryProfileId;\n    this.url = source.url;\n    this.protocols = source.protocols;\n    this.flavorIds = source.flavorIds;\n    if (source.drm) {\n      source.drm.map(drm => this.drm.push(new KalturaDrmPlaybackPluginData(drm)));\n    }\n  }\n\n  /**\n   * Checks if source has DRM data\n   * @function hasDrmData\n   * @returns {boolean} Is source has DRM\n   */\n  hasDrmData(): boolean {\n    return this.drm && this.drm.length > 0;\n  }\n\n  /**\n   * Checks if source has flavor IDs\n   * @function hasFlavorIds\n   * @returns {boolean} Is source ha flavor IDs\n   */\n  hasFlavorIds(): boolean {\n    return !!this.flavorIds && this.flavorIds.length > 0;\n  }\n\n  /**\n   * Returns source desired protocol if supported\n   * @param {string} protocol - the desired protocol for the source (base play url protocol)\n   * @returns {string} - protocol if protocol is in the protocols list - if not empty string returned\n   */\n  getProtocol(protocol: string): string {\n    let returnValue: string = '';\n    if (this.protocols && this.protocols.length > 0) {\n      let protocolsArr: Array<string> = this.protocols.split(',');\n      protocolsArr.forEach(p => {\n        if (p === protocol) {\n          returnValue = p;\n        }\n      });\n    } else if (protocol === 'http') {\n      return protocol;\n    }\n    return returnValue;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaMediaEntry from './kaltura-media-entry';\n\nexport default class KalturaBaseEntryListResponse extends ServiceResult {\n  /**\n   * @member - The total count\n   * @type {number}\n   */\n  totalCount: number;\n  /**\n   * @member - The entries\n   * @type {Array<KalturaMediaEntry>}\n   */\n  entries: Array<KalturaMediaEntry>;\n\n  /**\n   * @constructor\n   * @param {Object} responseObj The json response\n   */\n  constructor(responseObj: Object) {\n    super(responseObj);\n    if (!this.hasError) {\n      this.totalCount = responseObj.totalCount;\n      if (this.totalCount > 0) {\n        this.entries = [];\n        responseObj.objects.map(entry => this.entries.push(new KalturaMediaEntry(entry)));\n      }\n    }\n  }\n}\n","const clone = data => {\n  let node;\n  if (Array.isArray(data)) {\n    node = data.length > 0 ? data.slice(0) : [];\n    node.forEach((e, i) => {\n      if ((typeof e === 'object' && e !== {}) || (Array.isArray(e) && e.length > 0)) {\n        node[i] = clone(e);\n      }\n    });\n  } else if (typeof data === 'object') {\n    node = Object.assign({}, data);\n    Object.keys(node).forEach(key => {\n      if ((typeof node[key] === 'object' && node[key] !== {}) || (Array.isArray(node[key]) && node[key].length > 0)) {\n        node[key] = clone(node[key]);\n      }\n    });\n  } else {\n    node = data;\n  }\n  return node;\n};\n\nexport {clone};\n","//@flow\nimport KalturaRuleAction from './kaltura-rule-action';\n\nexport default class KalturaAccessControlModifyRequestHostRegexAction extends KalturaRuleAction {\n  /**\n   * @member - Request host regex pattern\n   * @type {string}\n   */\n  pattern: string;\n  /**\n   * @member - Request host regex replacement\n   * @type {string}\n   */\n  replacement: string;\n  /**\n   * @member - serverNodeId to generate replacment host from\n   * @type {number}\n   */\n  replacmenServerNodeId: number;\n\n  /**\n   * @constructor\n   * @param {Object} data - The response\n   */\n  constructor(data: Object) {\n    super(data);\n    this.pattern = data.pattern;\n    this.replacement = data.replacement;\n    this.replacmenServerNodeId = data.replacmenServerNodeId;\n  }\n}\n","//@flow\nexport default class KalturaFlavorAsset {\n  static Status: {[status: string]: number} = {\n    ERROR: -1,\n    QUEUED: 0,\n    CONVERTING: 1,\n    READY: 2,\n    DELETED: 3,\n    NOT_APPLICABLE: 4,\n    TEMP: 5,\n    WAIT_FOR_CONVERT: 6,\n    IMPORTING: 7,\n    VALIDATING: 8,\n    EXPORTING: 9\n  };\n\n  /**\n   * @member - The ID of the Flavor Asset\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member -The Flavor Params used to create this Flavor Asset\n   * @type {string}\n   */\n  flavorParamsId: string;\n  /**\n   * @member -The file extension\n   * @type {string}\n   */\n  fileExt: string;\n  /**\n   * @member - The overall bitrate (in KBits) of the Flavor Asset\n   *  @type {string}\n   */\n  bitrate: number;\n  /**\n   * @member - The width of the Flavor Asset\n   * @type {number}\n   */\n  width: number;\n  /**\n   * @member - The height of the Flavor Asset\n   * @type {number}\n   */\n  height: number;\n  /**\n   * @member - The frame rate (in FPS) of the Flavor Asset\n   * @type {number}\n   */\n  frameRate: number;\n  /**\n   * @member - True if this Flavor Asset is the original source\n   * @type {number}\n   */\n  isOriginal: boolean;\n  /**\n   * @member - True if this Flavor Asset is playable in KDP\n   * @type {boolean}\n   */\n  isWeb: boolean;\n  /**\n   * @member - The container format\n   * @type {boolean}\n   */\n  containerFormat: string;\n  /**\n   *@member - The video codec\n   * @type {boolean}\n   */\n  videoCodecId: string;\n  /**\n   * @member - The status of the Flavor Asset\n   * @type {number}\n   */\n  status: number;\n  /**\n   * @member - The language of the flavor asset\n   * @type {Status}\n   */\n  language: string;\n  /**\n   * @member - The label of the flavor asset\n   * @type {string}\n   */\n  label: string;\n\n  /**\n   * @constructor\n   * @param {Object} data The json response\n   */\n  constructor(data: any) {\n    this.id = data.id;\n    this.flavorParamsId = data.flavorParamsId;\n    this.fileExt = data.fileExt;\n    this.bitrate = data.bitrate;\n    this.width = data.width;\n    this.height = data.height;\n    this.id = data.id;\n    this.frameRate = data.frameRate;\n    this.isOriginal = data.isOriginal;\n    this.isWeb = data.isWeb;\n    this.containerFormat = data.containerFormat;\n    this.videoCodecId = data.videoCodecId;\n    this.status = data.status;\n    this.language = data.language;\n    this.label = data.label;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaAccessControlMessage from '../../common/response-types/kaltura-access-control-message';\nimport KalturaPlaybackSource from './kaltura-playback-source';\nimport KalturaAccessControlModifyRequestHostRegexAction from './kaltura-access-control-modify-request-host-regex-action';\nimport KalturaRuleAction from './kaltura-rule-action';\nimport KalturaFlavorAsset from './kaltura-flavor-asset';\nimport KalturaBumper from './kaltura-bumper';\n\nexport default class KalturaPlaybackContext extends ServiceResult {\n  /**\n   * @member - The playback sources\n   * @type {Array<KalturaPlaybackSource>}\n   */\n  sources: Array<KalturaPlaybackSource> = [];\n  /**\n   * @member - Array of actions as received from the rules that invalidated\n   * @type {Array<KalturaRuleAction>}\n   */\n  actions: Array<KalturaRuleAction> = [];\n  /**\n   * @member - Array of actions as received from the rules that invalidated\n   * @type {Array<KalturaAccessControlMessage>}\n   */\n  messages: Array<KalturaAccessControlMessage> = [];\n  /**\n   * @member - The flavor assets\n   * @type {Array<KalturaFlavorAsset>}\n   */\n  flavorAssets: Array<KalturaFlavorAsset> = [];\n  /**\n   * @member - The bumper data\n   * @type {Array<KalturaBumper>}\n   */\n  bumperData: Array<KalturaBumper> = [];\n\n  /**\n   * @constructor\n   * @param {Object} response The response\n   */\n  constructor(response: Object) {\n    super(response);\n    if (!this.hasError) {\n      const messages = response.messages;\n      if (messages) {\n        messages.map(message => this.messages.push(new KalturaAccessControlMessage(message)));\n      }\n      const actions = response.actions;\n      if (actions) {\n        actions.map(action => {\n          if (action.type === KalturaRuleAction.Type.REQUEST_HOST_REGEX) {\n            this.actions.push(new KalturaAccessControlModifyRequestHostRegexAction(action));\n          } else {\n            this.actions.push(new KalturaRuleAction(action));\n          }\n        });\n      }\n      const sources = response.sources;\n      if (sources) {\n        sources.map(source => this.sources.push(new KalturaPlaybackSource(source)));\n      }\n      const flavorAssets = response.flavorAssets;\n      if (flavorAssets) {\n        flavorAssets.map(flavor => this.flavorAssets.push(new KalturaFlavorAsset(flavor)));\n      }\n      const bumperData = response.bumperData;\n      if (bumperData) {\n        bumperData.map(bumper => this.bumperData.push(new KalturaBumper(bumper)));\n      }\n    }\n  }\n\n  hasBlockAction(): boolean {\n    return this.getBlockAction() !== undefined;\n  }\n\n  getBlockAction(): ?KalturaRuleAction {\n    return this.actions.find(action => action.type === KalturaRuleAction.Type.BLOCK);\n  }\n\n  getErrorMessages(): Array<KalturaAccessControlMessage> {\n    return this.messages;\n  }\n\n  /**\n   * Get the KalturaAccessControlModifyRequestHostRegexAction action\n   * @function getRequestHostRegexAction\n   * @returns {?KalturaAccessControlModifyRequestHostRegexAction} The action\n   * */\n  getRequestHostRegexAction(): ?KalturaAccessControlModifyRequestHostRegexAction {\n    const action = this.actions.find(action => action.type === KalturaRuleAction.Type.REQUEST_HOST_REGEX);\n    if (action instanceof KalturaAccessControlModifyRequestHostRegexAction) {\n      return action;\n    }\n  }\n}\n","//@flow\nexport default class KalturaMetadata {\n  static ObjectType: {[type: string]: string | number} = {\n    AD_CUE_POINT: 'adCuePointMetadata.AdCuePoint',\n    ANNOTATION: 'annotationMetadata.Annotation',\n    CODE_CUE_POINT: 'codeCuePointMetadata.CodeCuePoint',\n    THUMB_CUE_POINT: 'thumbCuePointMetadata.thumbCuePoint',\n    ENTRY: 1,\n    CATEGORY: 2,\n    USER: 3,\n    PARTNER: 4,\n    DYNAMIC_OBJECT: 5\n  };\n\n  static Status: {[status: string]: number} = {\n    VALID: 1,\n    INVALID: 2,\n    DELETED: 3\n  };\n\n  id: number;\n  metadataProfileId: number;\n  metadataProfileVersion: number;\n  metadataObjectType: string | number;\n  objectId: string;\n  version: number;\n  created: Date;\n  updated: Date;\n  status: number;\n  xml: string;\n\n  /**\n   * @constructor\n   * @param {Object} data The response\n   */\n  constructor(data: Object) {\n    this.id = data.id;\n    this.metadataProfileId = data.metadataProfileId;\n    this.metadataProfileVersion = data.metadataProfileVersion;\n    this.metadataProfileId = data.metadataProfileId;\n    this.metadataObjectType = data.metadataObjectType;\n    this.objectId = data.objectId;\n    this.version = data.version;\n    this.created = new Date(0);\n    this.created.setUTCSeconds(data.createdAt);\n    this.updated = new Date(0);\n    this.updated.setUTCSeconds(data.updatedAt);\n    this.status = data.status;\n    this.xml = data.xml;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaMetadata from './kaltura-metadata';\n\nexport default class KalturaMetadataListResponse extends ServiceResult {\n  totalCount: number;\n  metas: Array<KalturaMetadata>;\n\n  /**\n   * @constructor\n   * @param {Object} responseObj The response\n   */\n  constructor(responseObj: Object) {\n    super(responseObj);\n    if (!this.hasError) {\n      this.totalCount = responseObj.totalCount;\n      if (this.totalCount > 0) {\n        this.metas = [];\n        responseObj.objects.map(meta => this.metas.push(new KalturaMetadata(meta)));\n      }\n    }\n  }\n}\n","//@flow\nconst FIELDS =\n  'id,referenceId,name,description,thumbnailUrl,dataUrl,duration,msDuration,flavorParamsIds,mediaType,type,tags,dvrStatus,externalSourceType,status';\n\nexport default class BaseEntryResponseProfile {\n  static Type: {[type: string]: number} = {\n    INCLUDE_FIELDS: 1,\n    EXCLUDE_FIELDS: 2\n  };\n  /**\n   * @member - the response profile type\n   * @type {number}\n   */\n  type: number;\n  /**\n   * @member - Comma separated fields list to be included or excluded\n   * @type {string}\n   */\n  fields: string;\n\n  /**\n   * @constructor\n   * @param {Object} responseProfile -\n   */\n  constructor(responseProfile: Object = {}) {\n    this.type = responseProfile.type || BaseEntryResponseProfile.Type.INCLUDE_FIELDS;\n    this.fields = responseProfile.fields || FIELDS;\n  }\n}\n","// @flow\nimport {getLogLevel, setLogLevel, setLogger, type LogLevelType, LogLevel} from '../../util/logger';\nimport DataLoaderManager from './data-loader-manager';\nimport Error from '../../util/error/error';\n\nexport default class BaseProvider<MI> {\n  _partnerId: number;\n  _widgetId: ?string;\n  _ks: string;\n  _uiConfId: ?number;\n  _dataLoader: DataLoaderManager;\n  _playerVersion: string;\n  _logger: any;\n  _isAnonymous: boolean;\n  _networkRetryConfig: ProviderNetworkRetryParameters = {\n    async: true,\n    timeout: 0,\n    maxAttempts: 4\n  };\n\n  get partnerId(): number {\n    return this._partnerId;\n  }\n\n  get widgetId(): string {\n    return this._widgetId || this.defaultWidgetId;\n  }\n\n  get defaultWidgetId(): string {\n    return '_' + this._partnerId;\n  }\n\n  get uiConfId(): ?number {\n    return this._uiConfId;\n  }\n\n  get ks(): string {\n    return this._ks;\n  }\n\n  set ks(value: string): void {\n    this._ks = value;\n  }\n\n  get playerVersion(): string {\n    return this._playerVersion;\n  }\n\n  get isAnonymous(): boolean {\n    return this._isAnonymous;\n  }\n\n  constructor(options: ProviderOptionsObject, playerVersion: string) {\n    setLogger(options.logger);\n    this._partnerId = options.partnerId;\n    this._widgetId = options.widgetId;\n    this._uiConfId = options.uiConfId;\n    this._isAnonymous = !options.ks;\n    this._ks = options.ks || '';\n    this._playerVersion = playerVersion;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getMediaConfig(mediaInfo: MI): Promise<ProviderMediaConfigObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'getMediaConfig method must be implement by the derived class'\n      })\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getPlaylistConfig(playlistInfo: ProviderPlaylistInfoObject): Promise<ProviderPlaylistObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'The provider does not support loading playlist by id'\n      })\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getEntryListConfig(entryListInfo: ProviderEntryListObject): Promise<ProviderPlaylistObject> {\n    return Promise.reject(\n      new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.METHOD_NOT_IMPLEMENTED, {\n        message: 'The provider does not support loading entry list'\n      })\n    );\n  }\n\n  _verifyHasSources(sources: ProviderMediaConfigSourcesObject) {\n    if (sources.hls.concat(sources.dash, sources.progressive).length === 0) {\n      throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.MISSING_PLAY_SOURCE, {\n        action: '',\n        messages: `No play source for entry id: ${sources.id}`\n      });\n    }\n  }\n\n  get LogLevel(): LogLevelType {\n    return LogLevel;\n  }\n\n  getLogLevel(name?: string): Object {\n    return getLogLevel(name);\n  }\n\n  setLogLevel(level: Object, name?: string): void {\n    setLogLevel(level, name);\n  }\n}\n","//@flow\n\nimport MediaEntry from '../entities/media-entry';\n\nexport default class EntryList {\n  /**\n   * @member - entry list items\n   * @type {Array<MediaEntry>}\n   */\n  items: Array<MediaEntry>;\n\n  constructor() {\n    this.items = [];\n  }\n}\n","//@flow\n\nexport default class Bumper {\n  /**\n   * @member - bumper url\n   * @type {string}\n   */\n  url: string;\n  /**\n   * @member - bumper click through url\n   * @type {string}\n   */\n  clickThroughUrl: string;\n\n  /**\n   * @constructor\n   * @param {Object} data - The bumper response\n   */\n  constructor(data: Object) {\n    this.url = data.url;\n    this.clickThroughUrl = data.clickThroughUrl;\n  }\n}\n","//@flow\nimport KalturaPlaybackSource from './kaltura-playback-source';\n\nexport default class KalturaBumper {\n  /**\n   * @member - The bumper entry ID\n   * @type {string}\n   */\n  entryId: string;\n  /**\n   * @member - The bumper click through url\n   * @type {string}\n   */\n  clickThroughUrl: string;\n  /**\n   * @member - The bumper sources\n   * @type {Array<KalturaPlaybackSource>}\n   */\n  sources: Array<KalturaPlaybackSource>;\n\n  constructor(data: any) {\n    this.entryId = data.entryId;\n    this.clickThroughUrl = data.url;\n    this.sources = data.sources ? data.sources.map(source => new KalturaPlaybackSource(source)) : [];\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\n\nconst SERVICE_NAME: string = 'metadata_metadata';\n\nexport default class OVPMetadataService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for metadata_metadata.list\n   * @function getPlaybackContext\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The ks\n   * @param {string} entryId The entry ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static list(serviceUrl: string, ks: string, entryId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'list';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'metadata_metadata-list';\n    const filter = {objectType: 'KalturaMetadataFilter', objectIdEqual: entryId, metadataObjectTypeEqual: '1'};\n    request.params = {filter: filter, ks: ks};\n    return request;\n  }\n}\n","//@flow\nimport OVPConfiguration from './config';\n\ntype urlParamsType = {\n  partnerId: number,\n  entryId: string,\n  ks: string,\n  uiConfId: ?number,\n  format: string,\n  protocol: string,\n  extension: string,\n  flavorIds: ?string\n};\n\nexport default class PlaySourceUrlBuilder {\n  /**\n   * Returns source url by given url params\n   * @function build\n   * @param {urlParamsType} urlParams The params\n   * @returns {string} The URL\n   * @static\n   */\n  static build(urlParams: urlParamsType): string {\n    const config = OVPConfiguration.get();\n    const serviceUrlOrigin: string = config.serviceUrl.substr(0, config.serviceUrl.lastIndexOf('/'));\n    const {partnerId, entryId, ks, uiConfId, format, protocol, extension, flavorIds} = urlParams;\n\n    //verify mandatory params\n    if (!serviceUrlOrigin || !partnerId || !entryId || !format || !protocol) {\n      return '';\n    }\n\n    let playUrl = serviceUrlOrigin;\n    if (!serviceUrlOrigin.endsWith('/')) {\n      playUrl += '/';\n    }\n    playUrl += 'p/' + partnerId + '/sp/' + partnerId + '00' + '/playManifest/entryId/' + entryId + '/protocol/' + protocol + '/format/' + format;\n\n    if (flavorIds) {\n      playUrl += '/flavorIds/' + flavorIds;\n    } else if (uiConfId) {\n      playUrl += '/uiConfId/' + uiConfId;\n    }\n\n    if (ks !== '') {\n      playUrl += '/ks/' + ks;\n    }\n\n    if (extension !== '') {\n      playUrl += '/a.' + extension;\n    }\n\n    if (uiConfId && flavorIds !== '') {\n      playUrl += '?uiConfId=' + uiConfId;\n    }\n\n    return playUrl;\n  }\n}\n","//@flow\nexport default class XmlParser {\n  /**\n   * Parses xml string to json object\n   * @param {string} xml The xml to parse\n   * @returns {{}} The parsed xml as Json object\n   * @static\n   */\n  static xmlToJson(xml: Object) {\n    let obj = {};\n    if (xml.nodeType === 1) {\n      if (xml.attributes.length > 0) {\n        obj['@attributes'] = {};\n        for (let j = 0; j < xml.attributes.length; j++) {\n          let attribute = xml.attributes.item(j);\n          obj['@attributes'][attribute.nodeName] = attribute.nodeValue;\n        }\n      }\n    } else if (xml.nodeType === 3) {\n      obj = xml.nodeValue;\n    }\n    if (xml.hasChildNodes()) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        let item = xml.childNodes.item(i);\n        let nodeName = item.nodeName;\n        if (typeof obj[nodeName] === 'undefined') {\n          obj[nodeName] = this.xmlToJson(item);\n        } else {\n          if (typeof obj[nodeName].push === 'undefined') {\n            let old = obj[nodeName];\n            obj[nodeName] = [];\n            obj[nodeName].push(old);\n          }\n          obj[nodeName].push(this.xmlToJson(item));\n        }\n      }\n    }\n    return obj;\n  }\n}\n","//@flow\n\nimport MediaEntry from '../entities/media-entry';\n\nexport default class Playlist {\n  /**\n   * @member - playlist id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - playlist name\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - playlist description\n   * @type {string}\n   */\n  description: string;\n\n  /**\n   * @member - playlist poster\n   * @type {string}\n   */\n  poster: string;\n\n  /**\n   * @member - playlist items\n   * @type {Array<MediaEntry>}\n   */\n  items: Array<MediaEntry>;\n\n  constructor() {\n    this.items = [];\n  }\n}\n","// @flow\n\nimport {addKsToUrl} from './provider-parser';\n\nconst KalturaCaptionType: CaptionType = {\n  SRT: '1',\n  DFXP: '2',\n  WEBVTT: '3',\n  CAP: '4'\n};\n\nconst CaptionsFormatsMap: {[format: string]: string} = {\n  '3': 'vtt',\n  '1': 'srt'\n};\n\nclass ExternalCaptionsBuilder {\n  static createConfig(captions: Array<Object>, ks: string): Array<PKExternalCaptionObject> {\n    return captions.map(caption => {\n      let url = caption.url;\n      let type = CaptionsFormatsMap[caption.format];\n      if ([KalturaCaptionType.DFXP, KalturaCaptionType.CAP].includes(caption.format)) {\n        url = caption.webVttUrl;\n        type = CaptionsFormatsMap[KalturaCaptionType.WEBVTT];\n      }\n      url = addKsToUrl(url, ks);\n      return {\n        default: !!caption.isDefault,\n        type: type,\n        language: caption.languageCode,\n        label: caption.label,\n        url: url\n      };\n    });\n  }\n}\n\nexport {ExternalCaptionsBuilder};\n","//@flow\nimport KalturaPlaybackContext from './response-types/kaltura-playback-context';\nimport KalturaMetadataListResponse from './response-types/kaltura-metadata-list-response';\nimport KalturaMediaEntry from './response-types/kaltura-media-entry';\nimport KalturaPlaybackSource from './response-types/kaltura-playback-source';\nimport KalturaBumper from './response-types/kaltura-bumper';\nimport KalturaDrmPlaybackPluginData from '../common/response-types/kaltura-drm-playback-plugin-data';\nimport PlaySourceUrlBuilder from './play-source-url-builder';\nimport XmlParser from '../../util/xml-parser';\nimport getLogger from '../../util/logger';\nimport OVPConfiguration from './config';\nimport MediaEntry from '../../entities/media-entry';\nimport Drm from '../../entities/drm';\nimport MediaSource from '../../entities/media-source';\nimport MediaSources from '../../entities/media-sources';\nimport {SupportedStreamFormat, isProgressiveSource} from '../../entities/media-format';\nimport Playlist from '../../entities/playlist';\nimport EntryList from '../../entities/entry-list';\nimport Bumper from '../../entities/bumper';\nimport KalturaRuleAction from './response-types/kaltura-rule-action';\nimport KalturaAccessControlMessage from '../common/response-types/kaltura-access-control-message';\nimport type {OVPMediaEntryLoaderResponse} from './loaders/media-entry-loader';\nimport {ExternalCaptionsBuilder} from './external-captions-builder';\n\nclass OVPProviderParser {\n  static _logger = getLogger('OVPProviderParser');\n\n  /**\n   * Returns parsed media entry by given OVP response objects\n   * @function getMediaEntry\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {any} mediaEntryResponse - The media entry response\n   * @returns {MediaEntry} - The media entry\n   * @static\n   * @public\n   */\n  static getMediaEntry(ks: string, partnerId: number, uiConfId: ?number, mediaEntryResponse: any): MediaEntry {\n    const mediaEntry = new MediaEntry();\n    const entry = mediaEntryResponse.entry;\n    const playbackContext = mediaEntryResponse.playBackContextResult;\n    const metadataList = mediaEntryResponse.metadataListResult;\n    const kalturaSources = playbackContext.sources;\n\n    mediaEntry.sources = OVPProviderParser._getParsedSources(kalturaSources, ks, partnerId, uiConfId, entry, playbackContext);\n    if (OVPConfiguration.get().useApiCaptions && playbackContext.data.playbackCaptions) {\n      mediaEntry.sources.captions = ExternalCaptionsBuilder.createConfig(playbackContext.data.playbackCaptions, ks);\n    }\n    OVPProviderParser._fillBaseData(mediaEntry, entry, metadataList);\n    return mediaEntry;\n  }\n\n  /**\n   * Returns the url with KS\n   * @function addKsToUrl\n   * @param {String} url - The url to add the KS\n   * @param {string} ks - The ks\n   * @returns {string} - The url with KS\n   * @static\n   * @public\n   */\n  static addKsToUrl(url: string, ks: string): string {\n    const hasUrlExtension = path => {\n      const pathWithoutQuery = path.split('?')[0];\n      const pathAfterLastSlash = pathWithoutQuery.replace(/^.*[\\\\/]/, '');\n      return pathAfterLastSlash.indexOf('.') !== -1;\n    };\n    let ksParam;\n    if (ks) {\n      if (hasUrlExtension(url)) {\n        ksParam = url.indexOf('?') === -1 ? '?ks=' : '&ks=';\n      } else {\n        ksParam = '/ks/';\n      }\n      return url + ksParam + ks;\n    }\n    return url;\n  }\n\n  /**\n   * Returns parsed playlist by given OVP response objects\n   * @function getPlaylist\n   * @param {any} playlistResponse - The playlist response\n   * @returns {Playlist} - The playlist\n   * @static\n   * @public\n   */\n  static getPlaylist(playlistResponse: any): Playlist {\n    const playlist = new Playlist();\n    const playlistData = playlistResponse.playlistData;\n    const playlistItems = playlistResponse.playlistItems.entries;\n    playlist.id = playlistData.id;\n    playlist.name = playlistData.name;\n    playlist.description = playlistData.description;\n    playlist.poster = playlistData.poster;\n    playlistItems.forEach((entry: KalturaMediaEntry) => {\n      const mediaEntry = new MediaEntry();\n      OVPProviderParser._fillBaseData(mediaEntry, entry);\n      playlist.items.push(mediaEntry);\n    });\n    return playlist;\n  }\n\n  /**\n   * Returns parsed entry list by given OVP response objects\n   * @function getEntryList\n   * @param {any} playlistResponse - response\n   * @returns {Playlist} - The entry list\n   * @static\n   * @public\n   */\n  static getEntryList(playlistResponse: any): EntryList {\n    const entryList = new EntryList();\n    const playlistItems = playlistResponse.playlistItems.entries;\n    playlistItems.forEach(entry => {\n      const mediaEntry = new MediaEntry();\n      OVPProviderParser._fillBaseData(mediaEntry, entry);\n      entryList.items.push(mediaEntry);\n    });\n    return entryList;\n  }\n\n  /**\n   * Returns parsed bumper by given OTT response objects.\n   * @function getBumper\n   * @param {any} assetResponse - The asset response.\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @returns {?Bumper} - The bumper\n   * @static\n   * @public\n   */\n  static getBumper(assetResponse: any, ks: string, partnerId: number): ?Bumper {\n    const playbackContext = assetResponse.playBackContextResult;\n    const bumperData: KalturaBumper = playbackContext.bumperData[0];\n    if (bumperData) {\n      const bumperSources = bumperData && bumperData.sources;\n      const progressiveBumper = bumperSources.find(bumper => isProgressiveSource(bumper.format));\n      if (progressiveBumper) {\n        const parsedSources = OVPProviderParser._parseProgressiveSources(progressiveBumper, playbackContext, ks, partnerId, 0, bumperData.entryId);\n        if (parsedSources[0]) {\n          return new Bumper({url: parsedSources[0].url, clickThroughUrl: bumperData.clickThroughUrl});\n        }\n      }\n    }\n  }\n\n  static _fillBaseData(mediaEntry: MediaEntry, entry: KalturaMediaEntry, metadataList: ?KalturaMetadataListResponse) {\n    mediaEntry.poster = entry.poster;\n    mediaEntry.id = entry.id;\n    mediaEntry.duration = entry.duration;\n    mediaEntry.metadata = OVPProviderParser._parseMetadata(metadataList);\n    mediaEntry.metadata.description = entry.description || '';\n    mediaEntry.metadata.name = entry.name || '';\n    mediaEntry.metadata.tags = entry.tags || '';\n    mediaEntry.status = entry.status;\n\n    mediaEntry.type = OVPProviderParser._getEntryType(entry.entryType, entry.type);\n    if (mediaEntry.type === MediaEntry.Type.LIVE) {\n      mediaEntry.dvrStatus = entry.dvrStatus;\n    }\n\n    return mediaEntry;\n  }\n\n  static _getEntryType(entryTypeEnum: number, typeEnum: number | string): string {\n    let type = MediaEntry.Type.UNKNOWN;\n    switch (entryTypeEnum) {\n      case KalturaMediaEntry.MediaType.IMAGE.value:\n        type = MediaEntry.Type.IMAGE;\n        break;\n      case KalturaMediaEntry.MediaType.AUDIO.value:\n        type = MediaEntry.Type.AUDIO;\n        break;\n      default:\n        switch (typeEnum) {\n          case KalturaMediaEntry.EntryType.MEDIA_CLIP.value:\n            type = MediaEntry.Type.VOD;\n            break;\n          case KalturaMediaEntry.EntryType.LIVE_STREAM.value:\n          case KalturaMediaEntry.EntryType.LIVE_CHANNEL.value:\n            type = MediaEntry.Type.LIVE;\n            break;\n          default:\n            type = MediaEntry.Type.UNKNOWN;\n        }\n    }\n    return type;\n  }\n\n  /**\n   * Returns the parsed sources\n   * @function _getParsedSources\n   * @param {Array<KalturaPlaybackSource>} kalturaSources - The kaltura sources\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {Object} entry - The entry\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @return {MediaSources} - A media sources\n   * @static\n   * @private\n   */\n  static _getParsedSources(\n    kalturaSources: Array<KalturaPlaybackSource>,\n    ks: string,\n    partnerId: number,\n    uiConfId: ?number,\n    entry: Object,\n    playbackContext: KalturaPlaybackContext\n  ): MediaSources {\n    const sources = new MediaSources();\n    const addAdaptiveSource = (source: KalturaPlaybackSource) => {\n      const parsedSource = OVPProviderParser._parseAdaptiveSource(source, playbackContext, ks, partnerId, uiConfId, entry.id);\n      if (parsedSource) {\n        const sourceFormat = SupportedStreamFormat.get(source.format);\n        sources.map(parsedSource, sourceFormat);\n      }\n    };\n    const parseAdaptiveSources = () => {\n      kalturaSources.filter(source => !isProgressiveSource(source.format)).forEach(addAdaptiveSource);\n    };\n    const parseProgressiveSources = () => {\n      const progressiveSource = kalturaSources.find(source => {\n        //match progressive source with supported protocol(http/s)\n        return isProgressiveSource(source.format) && source.getProtocol(OVPProviderParser._getBaseProtocol()) !== '';\n      });\n      sources.progressive = OVPProviderParser._parseProgressiveSources(progressiveSource, playbackContext, ks, partnerId, uiConfId, entry.id);\n    };\n\n    const parseExternalMedia = () => {\n      const mediaSource = new MediaSource();\n      mediaSource.mimetype = 'video/youtube';\n      mediaSource.url = entry.referenceId;\n      mediaSource.id = entry.id + '_youtube';\n      sources.progressive.push(mediaSource);\n    };\n\n    if (entry.type === KalturaMediaEntry.EntryType.EXTERNAL_MEDIA.value) {\n      parseExternalMedia();\n    } else if (kalturaSources && kalturaSources.length > 0) {\n      parseAdaptiveSources();\n      parseProgressiveSources();\n    }\n    return sources;\n  }\n\n  /**\n   * Returns a parsed adaptive source\n   * @function _parseAdaptiveSource\n   * @param {KalturaPlaybackSource} kalturaSource - A kaltura source\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {string} entryId - The entry id\n   * @returns {?MediaSource} - The parsed adaptive kalturaSource\n   * @static\n   * @private\n   */\n  static _parseAdaptiveSource(\n    kalturaSource: ?KalturaPlaybackSource,\n    playbackContext: KalturaPlaybackContext,\n    ks: string,\n    partnerId: number,\n    uiConfId: ?number,\n    entryId: string\n  ): ?MediaSource {\n    const mediaSource: MediaSource = new MediaSource();\n    if (kalturaSource) {\n      let playUrl: string = '';\n      const mediaFormat = SupportedStreamFormat.get(kalturaSource.format);\n      const protocol = kalturaSource.getProtocol(OVPProviderParser._getBaseProtocol());\n      const deliveryProfileId = kalturaSource.deliveryProfileId;\n      const format = kalturaSource.format;\n      let extension: string = '';\n      if (mediaFormat) {\n        extension = mediaFormat.pathExt;\n        mediaSource.mimetype = mediaFormat.mimeType;\n      }\n      // in case playbackSource doesn't have flavors we don't need to build the url and we'll use the provided one.\n      if (kalturaSource.hasFlavorIds()) {\n        if (!extension && playbackContext.flavorAssets && playbackContext.flavorAssets.length > 0) {\n          extension = playbackContext.flavorAssets[0].fileExt;\n        }\n        playUrl = PlaySourceUrlBuilder.build({\n          entryId,\n          flavorIds: kalturaSource.flavorIds,\n          format,\n          ks,\n          partnerId,\n          uiConfId,\n          extension,\n          protocol\n        });\n      } else {\n        playUrl = OVPProviderParser.addKsToUrl(kalturaSource.url, ks);\n      }\n      if (!playUrl) {\n        const message = `failed to create play url from source, discarding source: (${entryId}_${deliveryProfileId}), ${format}`;\n        OVPProviderParser._logger.warn(message);\n        return null;\n      }\n      mediaSource.url = OVPProviderParser._applyRegexAction(playbackContext, playUrl);\n      mediaSource.id = entryId + '_' + deliveryProfileId + ',' + format;\n      if (kalturaSource.hasDrmData()) {\n        const drmParams: Array<Drm> = [];\n        kalturaSource.drm.forEach(drm => {\n          drmParams.push(new Drm(drm.licenseURL, KalturaDrmPlaybackPluginData.Scheme[drm.scheme], drm.certificate));\n        });\n        mediaSource.drmData = drmParams;\n      }\n    }\n    return mediaSource;\n  }\n\n  /**\n   * Returns parsed progressive sources\n   * @function _parseProgressiveSources\n   * @param {KalturaPlaybackSource} kalturaSource - A kaltura source\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @param {string} ks - The ks\n   * @param {number} partnerId - The partner ID\n   * @param {number} uiConfId - The uiConf ID\n   * @param {string} entryId - The entry id\n   * @returns {Array<MediaSource>} - The parsed progressive kalturaSources\n   * @static\n   * @private\n   */\n  static _parseProgressiveSources(\n    kalturaSource: ?KalturaPlaybackSource,\n    playbackContext: KalturaPlaybackContext,\n    ks: string,\n    partnerId: number,\n    uiConfId: ?number,\n    entryId: string\n  ): Array<MediaSource> {\n    const videoSources: Array<MediaSource> = [];\n    const audioSources: Array<MediaSource> = [];\n    if (kalturaSource) {\n      const protocol = kalturaSource.getProtocol(OVPProviderParser._getBaseProtocol());\n      const format = kalturaSource.format;\n      const deliveryProfileId = kalturaSource.deliveryProfileId;\n      const sourceId = deliveryProfileId + ',' + format;\n      playbackContext.flavorAssets.map(flavor => {\n        const mediaSource: MediaSource = new MediaSource();\n        mediaSource.id = flavor.id + sourceId;\n        mediaSource.mimetype = flavor.fileExt === 'mp3' ? 'audio/mp3' : 'video/mp4';\n        mediaSource.height = flavor.height;\n        mediaSource.width = flavor.width;\n        mediaSource.bandwidth = flavor.bitrate * 1024;\n        mediaSource.label = flavor.label || flavor.language;\n        const playUrl = PlaySourceUrlBuilder.build({\n          entryId,\n          flavorIds: flavor.id,\n          format,\n          ks,\n          partnerId: partnerId,\n          uiConfId: uiConfId,\n          extension: flavor.fileExt,\n          protocol\n        });\n        if (playUrl === '') {\n          OVPProviderParser._logger.warn(`failed to create play url from source, discarding source: (${entryId}_${deliveryProfileId}), ${format}.`);\n          return null;\n        } else {\n          mediaSource.url = OVPProviderParser._applyRegexAction(playbackContext, playUrl);\n          if (flavor.height && flavor.width) {\n            videoSources.push(mediaSource);\n          } else {\n            audioSources.push(mediaSource);\n          }\n        }\n      });\n    }\n    //If we have only audio flavors return them, otherwise return video flavors\n    return audioSources.length && !videoSources.length ? audioSources : videoSources;\n  }\n\n  /**\n   * Ovp metadata parser\n   * @function _parseMetaData\n   * @param {KalturaMetadataListResponse} metadataList The metadata list\n   * @returns {Object} Parsed metadata\n   * @static\n   * @private\n   */\n  static _parseMetadata(metadataList: ?KalturaMetadataListResponse): Object {\n    const metadata = {};\n    if (metadataList && metadataList.metas && metadataList.metas.length > 0) {\n      metadataList.metas.forEach(meta => {\n        if (meta.xml) {\n          let metaXml: Object;\n          const domParser: DOMParser = new DOMParser();\n          meta.xml = meta.xml.replace(/\\r?\\n|\\r/g, '');\n          meta.xml = meta.xml.replace(/>\\s*/g, '>');\n          meta.xml = meta.xml.replace(/>\\s*/g, '>');\n          metaXml = domParser.parseFromString(meta.xml, 'text/xml');\n          const metasObj: Object = XmlParser.xmlToJson(metaXml);\n          const metaKeys = Object.keys(metasObj.metadata);\n          metaKeys.forEach(key => {\n            metadata[key] = metasObj.metadata[key]['#text'];\n          });\n        }\n      });\n    }\n    return metadata;\n  }\n\n  /**\n   * Returns the base protocol\n   * @function _getBaseProtocol\n   * @returns {string} - The base protocol\n   * @static\n   * @private\n   */\n  static _getBaseProtocol(): string {\n    const config = OVPConfiguration.get();\n    const protocolRegex = /^https?:/;\n    const result = protocolRegex.exec(config.cdnUrl);\n    const protocol = result ? result[0] : document.location.protocol;\n    if (typeof protocol === 'string') {\n      return protocol.slice(0, -1); // remove ':' from the end\n    }\n    return 'https';\n  }\n\n  static hasBlockAction(response: OVPMediaEntryLoaderResponse): boolean {\n    return response.playBackContextResult.hasBlockAction();\n  }\n\n  static getBlockAction(response: OVPMediaEntryLoaderResponse): ?KalturaRuleAction {\n    return response.playBackContextResult.getBlockAction();\n  }\n\n  static getErrorMessages(response: OVPMediaEntryLoaderResponse): Array<KalturaAccessControlMessage> {\n    return response.playBackContextResult.getErrorMessages();\n  }\n\n  /**\n   * Applies the request host regex on the url\n   * @function _applyRegexAction\n   * @param {KalturaPlaybackContext} playbackContext - The playback context\n   * @param {string} playUrl - The original url\n   * @returns {string} - The request host regex applied url\n   * @static\n   * @private\n   */\n  static _applyRegexAction(playbackContext: KalturaPlaybackContext, playUrl: string): string {\n    const regexAction = playbackContext.getRequestHostRegexAction();\n    if (regexAction) {\n      const regex = new RegExp(regexAction.pattern, 'i');\n      if (playUrl.match(regex)) {\n        return playUrl.replace(regex, regexAction.replacement + '/');\n      }\n    }\n    return playUrl;\n  }\n}\n\nexport const addKsToUrl = OVPProviderParser.addKsToUrl;\nexport default OVPProviderParser;\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OVPBaseEntryService from '../services/base-entry-service';\nimport OVPMetadataService from '../services/meta-data-service';\nimport OVPConfiguration from '../config';\nimport KalturaPlaybackContext from '../response-types/kaltura-playback-context';\nimport KalturaMetadataListResponse from '../response-types/kaltura-metadata-list-response';\nimport KalturaBaseEntryListResponse from '../response-types/kaltura-base-entry-list-response';\nimport KalturaMediaEntry from '../response-types/kaltura-media-entry';\n\ntype OVPMediaEntryLoaderResponse = {\n  entry: KalturaMediaEntry,\n  playBackContextResult: KalturaPlaybackContext,\n  metadataListResult: KalturaMetadataListResponse\n};\nexport type {OVPMediaEntryLoaderResponse};\n\nexport default class OVPMediaEntryLoader implements ILoader {\n  _entryId: string;\n  _referenceId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'media';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   * @boolean {boolean} useExternalCaptions - if we should add captions request to the multirequests.\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._entryId = params.entryId;\n    this._referenceId = params.referenceId;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    let mediaEntryResponse: KalturaBaseEntryListResponse = new KalturaBaseEntryListResponse(response[0].data);\n    this._response.entry = mediaEntryResponse.entries[0];\n    this._response.playBackContextResult = new KalturaPlaybackContext(response[1].data);\n    this._response.metadataListResult = new KalturaMetadataListResponse(response[2].data);\n  }\n\n  get response(): OVPMediaEntryLoaderResponse {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OVPBaseEntryService.list(config.serviceUrl, params.ks, params.entryId, params.redirectFromEntryId, params.referenceId));\n    // Use the entry id from the request result to support loading by referenceId\n    const serviceEntryId = params.ks === '{1:result:ks}' ? '{2:result:objects:0:id}' : '{1:result:objects:0:id}';\n    requests.push(OVPBaseEntryService.getPlaybackContext(config.serviceUrl, params.ks, serviceEntryId));\n    requests.push(OVPMetadataService.list(config.serviceUrl, params.ks, serviceEntryId));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!(this._entryId || this._referenceId);\n  }\n}\n","// @flow\nimport DataLoaderManager from '../../common/data-loader-manager';\nimport OVPService from '../services/ovp-service';\n\n/**\n * OTTDataLoaderManager is a class that handles the OVP data loading\n * @param {string} playerVersion - player version\n * @param {string} partnerId - partner id\n * @param {string} ks - ks\n * @param {ProviderNetworkRetryParameters} [networkRetryConfig] - network retry configuration\n */\nexport default class OVPDataLoaderManager extends DataLoaderManager {\n  constructor(playerVersion: string, partnerId: number, ks: string = '', networkRetryConfig: ProviderNetworkRetryParameters) {\n    super(networkRetryConfig);\n    this._multiRequest = OVPService.getMultiRequest(playerVersion, ks, partnerId);\n  }\n}\n","//@flow\nimport OVPService from './ovp-service';\nimport RequestBuilder from '../../../util/request-builder';\nimport BaseEntryResponseProfile from '../request-params/base-entry-response-profile';\n\nconst SERVICE_NAME: string = 'playlist';\n\nexport default class OVPPlaylistService extends OVPService {\n  /**\n   * Creates an instance of RequestBuilder for playlist.getPlaybackContext\n   * @function getPlaybackContext\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The ks\n   * @param {string} playlistId The playlist ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static execute(serviceUrl: string, ks: string, playlistId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'execute';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = `${SERVICE_NAME}-execute`;\n    request.params = {\n      ks: ks,\n      id: playlistId,\n      responseProfile: new BaseEntryResponseProfile()\n    };\n    return request;\n  }\n\n  /**\n   * Creates an instance of RequestBuilder for playlist.list\n   * @function list\n   * @param {string} serviceUrl The base URL\n   * @param {string} ks The ks\n   * @param {string} playlistId The playlist ID\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static get(serviceUrl: string, ks: string, playlistId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'get';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = `${SERVICE_NAME}-get`;\n    request.params = {\n      ks: ks,\n      id: playlistId,\n      responseProfile: {\n        fields: 'id,name,description,thumbnailUrl',\n        type: 1\n      }\n    };\n    return request;\n  }\n}\n","//@flow\n\nexport default class KalturaPlaylist {\n  /**\n   * @member - playlist id\n   * @type {string}\n   */\n  id: string;\n  /**\n   * @member - playlist name\n   * @type {string}\n   */\n  name: string;\n  /**\n   * @member - playlist description\n   * @type {string}\n   */\n  description: string;\n  /**\n   * @member - playlist poster image\n   * @type {string}\n   */\n  poster: string;\n\n  /**\n   * @constructor\n   * @param {Object} playlist - The json response\n   */\n  constructor(playlist: Object) {\n    this.id = playlist.id;\n    this.name = playlist.name;\n    this.description = playlist.description;\n    this.poster = playlist.thumbnailUrl;\n  }\n}\n","//@flow\nimport ServiceResult from '../../common/base-service-result';\nimport KalturaMediaEntry from './kaltura-media-entry';\n\nexport default class KalturaMediaEntries extends ServiceResult {\n  /**\n   * @member - The entries\n   * @type {Array<KalturaMediaEntry>}\n   */\n  entries: Array<KalturaMediaEntry>;\n\n  /**\n   * @constructor\n   * @param {Object} responseObj The json response\n   */\n  constructor(responseObj: Object) {\n    super(responseObj);\n    if (!this.hasError) {\n      this.entries = [];\n      responseObj.map(entry => this.entries.push(new KalturaMediaEntry(entry)));\n    }\n  }\n}\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OVPPlaylistService from '../services/playlist-service';\nimport OVPConfiguration from '../config';\nimport KalturaPlaylist from '../response-types/kaltura-playlist';\nimport KalturaMediaEntries from '../response-types/kaltura-media-entries';\n\nexport default class OVPPlaylistLoader implements ILoader {\n  _playlistId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'playlist';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._playlistId = params.playlistId;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    this._response.playlistData = new KalturaPlaylist(response[0].data);\n    this._response.playlistItems = new KalturaMediaEntries(response[1].data);\n  }\n\n  get response(): any {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OVPPlaylistService.get(config.serviceUrl, params.ks, params.playlistId));\n    requests.push(OVPPlaylistService.execute(config.serviceUrl, params.ks, params.playlistId));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!this._playlistId;\n  }\n}\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OVPConfiguration from '../config';\nimport OVPBaseEntryService from '../services/base-entry-service';\nimport KalturaBaseEntryListResponse from '../response-types/kaltura-base-entry-list-response';\n\nexport default class OVPEntryListLoader implements ILoader {\n  _entries: Array<string>;\n  _requests: Array<RequestBuilder>;\n  _response: any = {playlistItems: {entries: []}};\n\n  static get id(): string {\n    return 'entry_list';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._entries = params.entries;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    let mediaEntryResponse: KalturaBaseEntryListResponse;\n    response.forEach(item => {\n      mediaEntryResponse = new KalturaBaseEntryListResponse(item.data);\n      this._response.playlistItems.entries.push(mediaEntryResponse.entries[0]);\n    });\n  }\n\n  get response(): any {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = OVPConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    params.entries.forEach(entry => {\n      requests.push(OVPBaseEntryService.list(config.serviceUrl, params.ks, entry.entryId || entry, params.redirectFromEntryId, entry.referenceId));\n    });\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!(this._entries && this._entries.length);\n  }\n}\n","//@flow\nimport getLogger from '../../util/logger';\nimport OVPConfiguration from './config';\nimport OVPProviderParser from './provider-parser';\nimport KalturaMediaEntry from './response-types/kaltura-media-entry';\nimport OVPMediaEntryLoader from './loaders/media-entry-loader';\nimport OVPSessionLoader from './loaders/session-loader';\nimport OVPDataLoaderManager from './loaders/data-loader-manager';\nimport OVPPlaylistLoader from './loaders/playlist-loader';\nimport BaseProvider from '../common/base-provider';\nimport MediaEntry from '../../entities/media-entry';\nimport OVPEntryListLoader from './loaders/entry-list-loader';\nimport Error from '../../util/error/error';\n\nexport default class OVPProvider extends BaseProvider<OVPProviderMediaInfoObject> {\n  _filterOptionsConfig: ProviderFilterOptionsObject = {redirectFromEntryId: true};\n  /**\n   * @constructor\n   * @param {ProviderOptionsObject} options - provider options\n   * @param {string} playerVersion - player version\n   */\n  constructor(options: ProviderOptionsObject, playerVersion: string) {\n    super(options, playerVersion);\n    this._logger = getLogger('OVPProvider');\n    OVPConfiguration.set(options.env);\n    this._setFilterOptionsConfig(options.filterOptions);\n    this._networkRetryConfig = Object.assign(this._networkRetryConfig, options.networkRetryParameters);\n  }\n\n  /**\n   * Gets the backend media config.\n   * @param {OVPProviderMediaInfoObject} mediaInfo - ovp media info\n   * @returns {Promise<ProviderMediaConfigObject>} - The provider media config\n   */\n  getMediaConfig(mediaInfo: OVPProviderMediaInfoObject): Promise<ProviderMediaConfigObject> {\n    if (mediaInfo.ks) {\n      this.ks = mediaInfo.ks;\n      this._isAnonymous = false;\n    }\n    if (this.widgetId !== this.defaultWidgetId) {\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OVPDataLoaderManager(this.playerVersion, this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const entryId = mediaInfo.entryId;\n      const referenceId = mediaInfo.referenceId;\n      if (entryId || referenceId) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OVPSessionLoader, {widgetId: this.widgetId});\n        }\n        const redirectFromEntryId = this._getEntryRedirectFilter(mediaInfo);\n        this._dataLoader.add(OVPMediaEntryLoader, {entryId, ks, redirectFromEntryId, referenceId});\n        return this._dataLoader.fetchData().then(\n          response => {\n            try {\n              resolve(this._parseDataFromResponse(response));\n            } catch (err) {\n              reject(err);\n            }\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject(new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.MISSING_MANDATORY_PARAMS, {message: 'missing entry id'}));\n      }\n    });\n  }\n\n  _getEntryRedirectFilter(mediaInfo: Object): boolean {\n    return typeof mediaInfo.redirectFromEntryId === 'boolean'\n      ? mediaInfo.redirectFromEntryId\n      : typeof this._filterOptionsConfig.redirectFromEntryId === 'boolean'\n      ? this._filterOptionsConfig.redirectFromEntryId\n      : true;\n  }\n\n  _setFilterOptionsConfig(options?: ProviderFilterOptionsObject): void {\n    if (options && typeof options.redirectFromEntryId == 'boolean') {\n      this._filterOptionsConfig.redirectFromEntryId = options.redirectFromEntryId;\n    }\n  }\n\n  _parseDataFromResponse(data: Map<string, Function>): ProviderMediaConfigObject {\n    this._logger.debug('Data parsing started');\n    const mediaConfig: ProviderMediaConfigObject = {\n      session: {\n        isAnonymous: this._isAnonymous,\n        partnerId: this.partnerId\n      },\n      sources: this._getDefaultSourcesObject(),\n      plugins: {}\n    };\n\n    if (this.uiConfId) {\n      mediaConfig.session.uiConfId = this.uiConfId;\n    }\n    if (data) {\n      if (data.has(OVPSessionLoader.id)) {\n        const sessionLoader = data.get(OVPSessionLoader.id);\n        if (sessionLoader && sessionLoader.response) {\n          mediaConfig.session.ks = sessionLoader.response;\n          if (this.widgetId !== this.defaultWidgetId) {\n            this.ks = mediaConfig.session.ks;\n          }\n        }\n      } else {\n        mediaConfig.session.ks = this.ks;\n      }\n      if (data.has(OVPMediaEntryLoader.id)) {\n        const mediaLoader = data.get(OVPMediaEntryLoader.id);\n        if (mediaLoader && mediaLoader.response) {\n          const response = (mediaLoader: OVPMediaEntryLoader).response;\n          if (OVPProviderParser.hasBlockAction(response)) {\n            throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.BLOCK_ACTION, {\n              action: OVPProviderParser.getBlockAction(response),\n              messages: OVPProviderParser.getErrorMessages(response)\n            });\n          }\n          const mediaEntry = OVPProviderParser.getMediaEntry(this.isAnonymous ? '' : this.ks, this.partnerId, this.uiConfId, response);\n          Object.assign(mediaConfig.sources, this._getSourcesObject(mediaEntry));\n          this._verifyMediaStatus(mediaEntry);\n          this._verifyHasSources(mediaConfig.sources);\n          const bumper = OVPProviderParser.getBumper(response, this.isAnonymous ? '' : this.ks, this.partnerId);\n          if (bumper) {\n            Object.assign(mediaConfig.plugins, {bumper});\n          }\n        }\n      }\n    }\n    this._logger.debug('Data parsing finished', mediaConfig);\n    return mediaConfig;\n  }\n\n  /**\n   * Checks media is ready for playback (not being imported or converted)\n   * @param {MediaEntry} mediaEntry - the media entry info\n   * @returns {void}\n   */\n  _verifyMediaStatus(mediaEntry: MediaEntry) {\n    if ([KalturaMediaEntry.EntryStatus.IMPORT, KalturaMediaEntry.EntryStatus.PRECONVERT].includes(mediaEntry.status)) {\n      throw new Error(Error.Severity.CRITICAL, Error.Category.SERVICE, Error.Code.MEDIA_STATUS_NOT_READY, {\n        messages: `Status of entry id ${mediaEntry.id} is ${mediaEntry.status} and is still being imported or converted`,\n        data: {status}\n      });\n    }\n  }\n  /**\n   * Gets the backend playlist config.\n   * @param {ProviderPlaylistInfoObject} playlistInfo - ovp playlist info\n   * @returns {Promise<ProviderPlaylistObject>} - The provider playlist config\n   */\n  getPlaylistConfig(playlistInfo: ProviderPlaylistInfoObject): Promise<ProviderPlaylistObject> {\n    if (playlistInfo.ks) {\n      this.ks = playlistInfo.ks;\n      this._isAnonymous = false;\n    }\n    if (this.widgetId !== this.defaultWidgetId) {\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OVPDataLoaderManager(this.playerVersion, this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const playlistId = playlistInfo.playlistId;\n      if (playlistId) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OVPSessionLoader, {widgetId: this.widgetId});\n        }\n        this._dataLoader.add(OVPPlaylistLoader, {playlistId, ks});\n        this._dataLoader.fetchData().then(\n          response => {\n            resolve(this._parsePlaylistDataFromResponse(response));\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject({success: false, data: 'Missing mandatory parameter'});\n      }\n    });\n  }\n\n  _parsePlaylistDataFromResponse(data: Map<string, Function>): ProviderPlaylistObject {\n    this._logger.debug('Data parsing started');\n    const playlistConfig: ProviderPlaylistObject = this._getPlaylistObject();\n    if (data && data.has(OVPPlaylistLoader.id)) {\n      const playlistLoader = data.get(OVPPlaylistLoader.id);\n      if (playlistLoader && playlistLoader.response) {\n        const playlist = OVPProviderParser.getPlaylist(playlistLoader.response);\n        playlistConfig.id = playlist.id;\n        playlistConfig.poster = playlist.poster;\n        playlistConfig.metadata.name = playlist.name;\n        playlistConfig.metadata.description = playlist.description;\n        playlist.items.forEach(i => playlistConfig.items.push({sources: this._getSourcesObject(i)}));\n      }\n    }\n    this._logger.debug('Data parsing finished', playlistConfig);\n    return playlistConfig;\n  }\n\n  /**\n   * Gets playlist config from entry list.\n   * @param {ProviderEntryListObject} entryListInfo - ovp entry list info\n   * @returns {Promise<ProviderPlaylistObject>} - The provider playlist config\n   */\n  getEntryListConfig(entryListInfo: ProviderEntryListObject): Promise<ProviderPlaylistObject> {\n    if (entryListInfo.ks) {\n      this.ks = entryListInfo.ks;\n      this._isAnonymous = false;\n    }\n    if (this.widgetId !== this.defaultWidgetId) {\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OVPDataLoaderManager(this.playerVersion, this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const entries = entryListInfo.entries;\n      if (entries && entries.length) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OVPSessionLoader, {widgetId: this.widgetId});\n        }\n        const redirectFromEntryId = this._getEntryRedirectFilter(entryListInfo);\n        this._dataLoader.add(OVPEntryListLoader, {entries, ks, redirectFromEntryId});\n        this._dataLoader.fetchData().then(\n          response => {\n            resolve(this._parseEntryListDataFromResponse(response));\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject({success: false, data: 'Missing mandatory parameter'});\n      }\n    });\n  }\n\n  _parseEntryListDataFromResponse(data: Map<string, Function>): ProviderPlaylistObject {\n    this._logger.debug('Data parsing started');\n    const playlistConfig: ProviderPlaylistObject = this._getPlaylistObject();\n    if (data && data.has(OVPEntryListLoader.id)) {\n      const playlistLoader = data.get(OVPEntryListLoader.id);\n      if (playlistLoader && playlistLoader.response) {\n        const entryList = OVPProviderParser.getEntryList(playlistLoader.response);\n        entryList.items.forEach(i => playlistConfig.items.push({sources: this._getSourcesObject(i)}));\n      }\n    }\n    this._logger.debug('Data parsing finished', playlistConfig);\n    return playlistConfig;\n  }\n\n  _getPlaylistObject(): ProviderPlaylistObject {\n    return {\n      id: '',\n      metadata: {\n        name: '',\n        description: ''\n      },\n      poster: '',\n      items: []\n    };\n  }\n\n  _getDefaultSourcesObject(): ProviderMediaConfigSourcesObject {\n    return {\n      hls: [],\n      dash: [],\n      progressive: [],\n      id: '',\n      duration: 0,\n      type: MediaEntry.Type.UNKNOWN,\n      poster: '',\n      dvr: false,\n      vr: null,\n      metadata: {\n        name: '',\n        description: '',\n        tags: ''\n      }\n    };\n  }\n\n  _getSourcesObject(mediaEntry: MediaEntry) {\n    const sourcesObject: ProviderMediaConfigSourcesObject = this._getDefaultSourcesObject();\n    const mediaSources = mediaEntry.sources.toJSON();\n    sourcesObject.hls = mediaSources.hls;\n    sourcesObject.dash = mediaSources.dash;\n    sourcesObject.progressive = mediaSources.progressive;\n    sourcesObject.id = mediaEntry.id;\n    sourcesObject.duration = mediaEntry.duration;\n    sourcesObject.type = mediaEntry.type;\n    sourcesObject.dvr = !!mediaEntry.dvrStatus;\n    sourcesObject.poster = mediaEntry.poster;\n    if (mediaEntry.sources.captions) {\n      sourcesObject.captions = mediaEntry.sources.captions;\n    }\n    if (mediaEntry.metadata && typeof mediaEntry.metadata.tags === 'string' && mediaEntry.metadata.tags.indexOf('360') > -1) {\n      sourcesObject.vr = {};\n    }\n    Object.assign(sourcesObject.metadata, mediaEntry.metadata);\n    return sourcesObject;\n  }\n}\n","//@flow\nimport {clone} from '../../util/clone';\n\nconst defaultConfig: Object = {\n  serviceUrl: 'https://cdnapisec.kaltura.com/api_v3',\n  cdnUrl: 'https://cdnapisec.kaltura.com',\n  serviceParams: {\n    apiVersion: '3.3.0',\n    format: 1\n  },\n  useApiCaptions: true\n};\n\nexport default class StreamAMGConfiguration {\n  static set(clientConfig?: ProviderEnvConfigObject) {\n    if (clientConfig) {\n      Object.assign(defaultConfig, clientConfig);\n    }\n  }\n\n  static get(): Object {\n    return clone(defaultConfig);\n  }\n}\n\nexport {StreamAMGConfiguration};\n","//@flow\nimport OVPBaseEntryService from '../../ovp/services/base-entry-service';\nimport RequestBuilder from '../../../util/request-builder';\n\nconst SERVICE_NAME: string = 'baseEntry';\n\nexport default class StreamAMGBaseEntryService extends OVPBaseEntryService {\n  /**\n   * Creates an instance of RequestBuilder for baseentry.getContextData\n   * @function getContextData\n   * @param {string} serviceUrl The service base URL\n   * @param {string} ks The ks\n   * @param {serviceEntryId} serviceEntryId The entry id from the request result (to support loading by referenceId)\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  static getContextData(serviceUrl: string, ks: string, serviceEntryId: string): RequestBuilder {\n    const headers: Map<string, string> = new Map();\n    headers.set('Content-Type', 'application/json');\n    const request = new RequestBuilder(headers);\n    request.service = SERVICE_NAME;\n    request.action = 'getContextData';\n    request.method = 'POST';\n    request.url = request.getUrl(serviceUrl);\n    request.tag = 'baseEntry-getContextData';\n    const contextDataParams = {objectType: 'KalturaEntryContextDataParams', flavorTags: 'all'};\n    request.params = {entryId: serviceEntryId, ks: ks, contextDataParams: contextDataParams};\n    return request;\n  }\n}\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport OVPBaseEntryService from '../../ovp/services/base-entry-service';\nimport OVPMetadataService from '../../ovp/services/meta-data-service';\nimport StreamAMGConfiguration from '../config';\nimport KalturaPlaybackContext from '../../ovp/response-types/kaltura-playback-context';\nimport KalturaMetadataListResponse from '../../ovp/response-types/kaltura-metadata-list-response';\nimport KalturaBaseEntryListResponse from '../../ovp/response-types/kaltura-base-entry-list-response';\nimport StreamAMGBaseEntryService from '../services/base-entry-service';\nimport type {OVPMediaEntryLoaderResponse} from '../../ovp/loaders/media-entry-loader';\n\nexport default class StreamAMGMediaEntryLoader implements ILoader {\n  _entryId: string;\n  _referenceId: string;\n  _requests: Array<RequestBuilder>;\n  _response: any = {};\n\n  static get id(): string {\n    return 'media';\n  }\n\n  /**\n   * @constructor\n   * @param {Object} params loader params\n   * @boolean {boolean} useExternalCaptions - if we should add captions request to the multirequests.\n   */\n  constructor(params: Object) {\n    this.requests = this.buildRequests(params);\n    this._entryId = params.entryId;\n    this._referenceId = params.referenceId;\n  }\n\n  set requests(requests: Array<RequestBuilder>) {\n    this._requests = requests;\n  }\n\n  get requests(): Array<RequestBuilder> {\n    return this._requests;\n  }\n\n  set response(response: any) {\n    console.log(response);\n    let mediaEntryResponse: KalturaBaseEntryListResponse = new KalturaBaseEntryListResponse(response[0].data);\n\n    // OM START: Not supported by StreamAMG Kaltura yet, simulate it via playManifest\n    response[1].data.sources = [\n      {\n        format: 'applehttp',\n        deliveryProfileId: '',\n        // KS is added automatically by the library\n        url: `https://open.http.mp.streamamg.com/p/3000178/sp/300017800/playManifest/entryId/${mediaEntryResponse.entries[0].id}/format/applehttp/protocol/https/a.m3u8`,\n        protocols: 'https',\n        flavorIds: response[1].data.flavorAssets.map(asset => asset.id).join(',')\n      }\n    ];\n    // OM END\n\n    this._response.entry = mediaEntryResponse.entries[0];\n    this._response.playBackContextResult = new KalturaPlaybackContext(response[1].data);\n    this._response.metadataListResult = new KalturaMetadataListResponse(response[2].data);\n  }\n\n  get response(): OVPMediaEntryLoaderResponse {\n    return this._response;\n  }\n\n  /**\n   * Builds loader requests\n   * @function\n   * @param {Object} params Requests parameters\n   * @returns {RequestBuilder} The request builder\n   * @static\n   */\n  buildRequests(params: Object): Array<RequestBuilder> {\n    const config = StreamAMGConfiguration.get();\n    const requests: Array<RequestBuilder> = [];\n    requests.push(OVPBaseEntryService.list(config.serviceUrl, params.ks, params.entryId, params.redirectFromEntryId, params.referenceId));\n    // Use the entry id from the request result to support loading by referenceId\n    const serviceEntryId = params.ks === '{1:result:ks}' ? '{2:result:objects:0:id}' : '{1:result:objects:0:id}';\n    requests.push(StreamAMGBaseEntryService.getContextData(config.serviceUrl, params.ks, serviceEntryId));\n    requests.push(OVPMetadataService.list(config.serviceUrl, params.ks, serviceEntryId));\n    return requests;\n  }\n\n  /**\n   * Loader validation function\n   * @function\n   * @returns {boolean} Is valid\n   */\n  isValid(): boolean {\n    return !!(this._entryId || this._referenceId);\n  }\n}\n","//@flow\nimport RequestBuilder from '../../../util/request-builder';\nimport Error from '../../../util/error/error';\nimport MultiRequestBuilder, {MultiRequestResult} from '../../common/multi-request-builder';\n\nexport default class LegacyMultiRequestBuilder extends MultiRequestBuilder {\n  /**\n   * Adds request to requests array\n   * @function add\n   * @param {RequestBuilder} request The request\n   * @returns {MultiRequestBuilder} The multiRequest\n   */\n  add(request: RequestBuilder): MultiRequestBuilder {\n    this.requests.push(request);\n\n    this.params[this.requests.length + ':service'] = request.service;\n    this.params[this.requests.length + ':action'] = request.action;\n    this.addParams(this.requests.length + ':', request.params);\n    return this;\n  }\n\n  addParams(prefix: string, object: Object) {\n    for (const key of Object.keys(object)) {\n      if (typeof object[key] === 'object') {\n        this.addParams(prefix + key + ':', object[key]);\n      } else {\n        this.params[prefix + key] = object[key];\n      }\n    }\n  }\n\n  /**\n   * Executes a multi request\n   * @function execute\n   * @returns {Promise} The multirequest execution promise\n   */\n  execute(): Promise<Object> {\n    return new Promise((resolve, reject) => {\n      // OM START: Removed the stringify of params\n      // try {\n      //   this.params = JSON.stringify(this.params);\n      // } catch (err) {\n      //   MultiRequestBuilder._logger.error(`${err.message}`);\n      //   reject(\n      //     new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.FAILED_PARSING_REQUEST, {\n      //       error: err,\n      //       params: this.params\n      //     })\n      //   );\n      // }\n      // OM END\n      this.doHttpRequest().then(\n        data => {\n          const multiRequestResult = new MultiRequestResult(data);\n          if (multiRequestResult.success) {\n            resolve({\n              headers: this.responseHeaders,\n              response: multiRequestResult\n            });\n          } else {\n            reject(\n              new Error(Error.Severity.CRITICAL, Error.Category.NETWORK, Error.Code.MULTIREQUEST_API_ERROR, {\n                url: this.url,\n                headers: this.responseHeaders,\n                results: multiRequestResult.results\n              })\n            );\n          }\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n  }\n\n  _createXHR(): void {\n    let request = new XMLHttpRequest();\n    request.onreadystatechange = () => {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          try {\n            // TODO: XML\n            console.error(request);\n            const response = JSON.parse(request.responseText);\n            this.responseHeaders = this._getResponseHeaders(request);\n            // the promise returns the response for backwards compatibility\n            return this._requestPromise.resolve(response);\n          } catch (error) {\n            this._requestPromise.reject(\n              this._createError(request, Error.Code.BAD_SERVER_RESPONSE, {\n                text: request.responseText\n              })\n            );\n          }\n        }\n      }\n    };\n    // OM START: Params into URL\n    const url = this.url.split('?')[0] + createQs(Object.assign({service: this.service, action: this.action ?? ''}, this.params));\n    // OM END\n    request.open(this.method, url, this.retryConfig.async);\n    if (this.retryConfig.async && this.retryConfig.timeout) {\n      request.timeout = this.retryConfig.timeout;\n    }\n    const requestTime = performance.now();\n    request.ontimeout = () => {\n      this._handleError(request, Error.Code.TIMEOUT, {\n        timeout: (performance.now() - requestTime) / 1000,\n        statusText: request.statusText\n      });\n    };\n    request.onerror = request.onabort = () => {\n      this._handleError(request, Error.Code.HTTP_ERROR, {\n        text: request.responseText,\n        statusText: request.statusText\n      });\n    };\n    this.headers.forEach((value, key) => {\n      request.setRequestHeader(key, value);\n    });\n    // OM START: No params in body\n    request.send(this.params);\n    // OM END\n  }\n}\n\n/**\n * Encode query string\n *\n * @param {Object} params Params\n * @returns {string} Return\n */\nfunction encodeQs(params) {\n  let result = [];\n  for (let key of Object.keys(params)) {\n    if (Array.isArray(params[key])) {\n      key += '[]';\n      params[key].forEach(eachValue => {\n        result.push(encodeURIComponent(key) + '=' + encodeURIComponent(eachValue));\n      });\n      continue;\n    }\n    result.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));\n  }\n  return result.join('&');\n}\n\n/**\n * Encode query string\n *\n * @param {Object} params Params\n * @returns {string} Return\n */\nfunction createQs(params) {\n  if (Object.keys(params).length == 0) {\n    return '';\n  }\n\n  return '?' + encodeQs(params);\n}\n","//@flow\nimport MultiRequestBuilder from './multi-request-builder';\nimport StreamAMGConfiguration from '../config';\n\nconst SERVICE_NAME: string = 'multirequest';\n\nexport default class OVPService {\n  /**\n   * Gets a new instance of MultiRequestBuilder with ovp params\n   * @function getMultiRequest\n   * @param {string} playerVersion The player version\n   * @param {string} ks The ks\n   * @param {string} partnerId The partner ID\n   * @returns {MultiRequestBuilder} The multi request builder\n   * @static\n   */\n  static getMultiRequest(playerVersion: string, ks: string, partnerId?: number): MultiRequestBuilder {\n    const config = StreamAMGConfiguration.get();\n    const ovpParams = config.serviceParams;\n    Object.assign(ovpParams, {ks: ks, clientTag: 'html5:v' + playerVersion});\n    if (partnerId) {\n      Object.assign(ovpParams, {partnerId: partnerId});\n    }\n    const headers: Map<string, string> = new Map();\n    // OM START: Remove content type - we're gonna be GET reqest and receiving XML\n    //headers.set('Content-Type', 'application/json');\n    // OM END\n    const multiReq = new MultiRequestBuilder(headers);\n    multiReq.method = 'GET';\n    multiReq.service = SERVICE_NAME;\n    // OM START: Patch in index.php automatically, otherwise we get redirects and fail\n    multiReq.url = multiReq.getUrl(config.serviceUrl.match('/index.php$') ? config.serviceUrl : config.serviceUrl + '/index.php');\n    // OM END\n    multiReq.params = ovpParams;\n    return multiReq;\n  }\n}\n","// @flow\nimport DataLoaderManager from '../../common/data-loader-manager';\nimport OVPService from '../services/ovp-service';\n\n/**\n * OTTDataLoaderManager is a class that handles the OVP data loading\n * @param {string} playerVersion - player version\n * @param {string} partnerId - partner id\n * @param {string} ks - ks\n * @param {ProviderNetworkRetryParameters} [networkRetryConfig] - network retry configuration\n */\nexport default class OVPDataLoaderManager extends DataLoaderManager {\n  constructor(playerVersion: string, partnerId: number, ks: string = '', networkRetryConfig: ProviderNetworkRetryParameters) {\n    super(networkRetryConfig);\n    this._multiRequest = OVPService.getMultiRequest(playerVersion, ks, partnerId);\n  }\n}\n","//@flow\nimport getLogger from '../../util/logger';\nimport StreamAMGMediaEntryLoader from './loaders/media-entry-loader';\nimport OVPSessionLoader from '../ovp/loaders/session-loader';\nimport OVPDataLoaderManager from './loaders/data-loader-manager';\nimport Error from '../../util/error/error';\nimport OVPProvider from '../ovp/provider';\nimport StreamAMGConfiguration from './config';\n\nexport default class StreamAMGProvider extends OVPProvider {\n  /**\n   * @constructor\n   * @param {ProviderOptionsObject} options - provider options\n   * @param {string} playerVersion - player version\n   */\n  constructor(options: ProviderOptionsObject, playerVersion: string) {\n    super(options, playerVersion);\n    this._logger = getLogger('StreamAMGProvider');\n    StreamAMGConfiguration.set(options.env);\n    this._setFilterOptionsConfig(options.filterOptions);\n    this._networkRetryConfig = Object.assign(this._networkRetryConfig, options.networkRetryParameters);\n  }\n\n  /**\n   * Gets the backend media config.\n   * @param {OVPProviderMediaInfoObject} mediaInfo - ovp media info\n   * @returns {Promise<ProviderMediaConfigObject>} - The provider media config\n   */\n  getMediaConfig(mediaInfo: OVPProviderMediaInfoObject): Promise<ProviderMediaConfigObject> {\n    if (mediaInfo.ks) {\n      this.ks = mediaInfo.ks;\n      this._isAnonymous = false;\n    }\n    if (this.widgetId !== this.defaultWidgetId) {\n      this._isAnonymous = false;\n    }\n    this._dataLoader = new OVPDataLoaderManager(this.playerVersion, this.partnerId, this.ks, this._networkRetryConfig);\n    return new Promise((resolve, reject) => {\n      const entryId = mediaInfo.entryId;\n      const referenceId = mediaInfo.referenceId;\n      if (entryId || referenceId) {\n        let ks: string = this.ks;\n        if (!ks) {\n          ks = '{1:result:ks}';\n          this._dataLoader.add(OVPSessionLoader, {widgetId: this.widgetId});\n        }\n        const redirectFromEntryId = this._getEntryRedirectFilter(mediaInfo);\n        // OM START: Remove the playbackContext that is not supported and add our customised loader\n        this._dataLoader.add(StreamAMGMediaEntryLoader, {entryId, ks, redirectFromEntryId, referenceId});\n        // OM END\n        return this._dataLoader.fetchData().then(\n          response => {\n            try {\n              resolve(this._parseDataFromResponse(response));\n            } catch (err) {\n              reject(err);\n            }\n          },\n          err => {\n            reject(err);\n          }\n        );\n      } else {\n        reject(new Error(Error.Severity.CRITICAL, Error.Category.PROVIDER, Error.Code.MISSING_MANDATORY_PARAMS, {message: 'missing entry id'}));\n      }\n    });\n  }\n}\n","// @flow\nimport StreamAMGProvider from './provider';\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\n\nconst NAME = __NAME__ + '-streamamg';\nconst VERSION = __VERSION__;\n\nexport {StreamAMGProvider as Provider, NAME, VERSION};\n"],"sourceRoot":""}